
CRICKET_STM32RET6_V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004098  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800427c  0800427c  0001427c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043a0  080043a0  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  080043a0  080043a0  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043a0  080043a0  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043a4  080043a4  000143a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080043a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001fc  080045a4  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  080045a4  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd3c  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002166  00000000  00000000  0002dfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00030110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa1  00000000  00000000  00030ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aad3  00000000  00000000  00031949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fce9  00000000  00000000  0004c41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f58d  00000000  00000000  0005c105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003db0  00000000  00000000  000fb694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ff444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001fc 	.word	0x200001fc
 8000200:	00000000 	.word	0x00000000
 8000204:	08004264 	.word	0x08004264

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000200 	.word	0x20000200
 8000220:	08004264 	.word	0x08004264

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000238:	f3bf 8f4f 	dsb	sy
}
 800023c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__NVIC_SystemReset+0x24>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000246:	4904      	ldr	r1, [pc, #16]	; (8000258 <__NVIC_SystemReset+0x24>)
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <__NVIC_SystemReset+0x28>)
 800024a:	4313      	orrs	r3, r2
 800024c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800024e:	f3bf 8f4f 	dsb	sy
}
 8000252:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000254:	bf00      	nop
 8000256:	e7fd      	b.n	8000254 <__NVIC_SystemReset+0x20>
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	05fa0004 	.word	0x05fa0004

08000260 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART1)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a4c      	ldr	r2, [pc, #304]	; (80003a0 <HAL_UART_RxCpltCallback+0x140>)
 800026e:	4293      	cmp	r3, r2
 8000270:	f040 808d 	bne.w	800038e <HAL_UART_RxCpltCallback+0x12e>
	{
		if((rxData!='\r')&&(rxData!='\n')){
 8000274:	4b4b      	ldr	r3, [pc, #300]	; (80003a4 <HAL_UART_RxCpltCallback+0x144>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b0d      	cmp	r3, #13
 800027a:	d014      	beq.n	80002a6 <HAL_UART_RxCpltCallback+0x46>
 800027c:	4b49      	ldr	r3, [pc, #292]	; (80003a4 <HAL_UART_RxCpltCallback+0x144>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b0a      	cmp	r3, #10
 8000282:	d010      	beq.n	80002a6 <HAL_UART_RxCpltCallback+0x46>
			simcomRxBuffer[rxIndex++]=rxData;
 8000284:	4b48      	ldr	r3, [pc, #288]	; (80003a8 <HAL_UART_RxCpltCallback+0x148>)
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	b291      	uxth	r1, r2
 800028c:	4a46      	ldr	r2, [pc, #280]	; (80003a8 <HAL_UART_RxCpltCallback+0x148>)
 800028e:	8011      	strh	r1, [r2, #0]
 8000290:	461a      	mov	r2, r3
 8000292:	4b44      	ldr	r3, [pc, #272]	; (80003a4 <HAL_UART_RxCpltCallback+0x144>)
 8000294:	7819      	ldrb	r1, [r3, #0]
 8000296:	4b45      	ldr	r3, [pc, #276]	; (80003ac <HAL_UART_RxCpltCallback+0x14c>)
 8000298:	5499      	strb	r1, [r3, r2]
			rxDataCouter++;
 800029a:	4b45      	ldr	r3, [pc, #276]	; (80003b0 <HAL_UART_RxCpltCallback+0x150>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	3301      	adds	r3, #1
 80002a0:	4a43      	ldr	r2, [pc, #268]	; (80003b0 <HAL_UART_RxCpltCallback+0x150>)
 80002a2:	6013      	str	r3, [r2, #0]
 80002a4:	e073      	b.n	800038e <HAL_UART_RxCpltCallback+0x12e>
		}
		else{
			if(isConnectMQTT==1){
 80002a6:	4b43      	ldr	r3, [pc, #268]	; (80003b4 <HAL_UART_RxCpltCallback+0x154>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d169      	bne.n	8000382 <HAL_UART_RxCpltCallback+0x122>
				switch(rxDataCouter){
 80002ae:	4b40      	ldr	r3, [pc, #256]	; (80003b0 <HAL_UART_RxCpltCallback+0x150>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b24      	cmp	r3, #36	; 0x24
 80002b4:	d014      	beq.n	80002e0 <HAL_UART_RxCpltCallback+0x80>
 80002b6:	2b24      	cmp	r3, #36	; 0x24
 80002b8:	dc63      	bgt.n	8000382 <HAL_UART_RxCpltCallback+0x122>
 80002ba:	2b23      	cmp	r3, #35	; 0x23
 80002bc:	d006      	beq.n	80002cc <HAL_UART_RxCpltCallback+0x6c>
 80002be:	2b23      	cmp	r3, #35	; 0x23
 80002c0:	dc5f      	bgt.n	8000382 <HAL_UART_RxCpltCallback+0x122>
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d021      	beq.n	800030a <HAL_UART_RxCpltCallback+0xaa>
 80002c6:	2b0e      	cmp	r3, #14
 80002c8:	d04b      	beq.n	8000362 <HAL_UART_RxCpltCallback+0x102>
 80002ca:	e05a      	b.n	8000382 <HAL_UART_RxCpltCallback+0x122>
				case strlen(FARM)+16:
					payLoadPin = (int)simcomRxBuffer[strlen(FARM)+15] -48;
 80002cc:	4b37      	ldr	r3, [pc, #220]	; (80003ac <HAL_UART_RxCpltCallback+0x14c>)
 80002ce:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80002d2:	3b30      	subs	r3, #48	; 0x30
 80002d4:	4a38      	ldr	r2, [pc, #224]	; (80003b8 <HAL_UART_RxCpltCallback+0x158>)
 80002d6:	6013      	str	r3, [r2, #0]
					loadflag = 1;
 80002d8:	4b38      	ldr	r3, [pc, #224]	; (80003bc <HAL_UART_RxCpltCallback+0x15c>)
 80002da:	2201      	movs	r2, #1
 80002dc:	601a      	str	r2, [r3, #0]
					break;
 80002de:	e050      	b.n	8000382 <HAL_UART_RxCpltCallback+0x122>
				case strlen(FARM)+17:
					payLoadPin = ((int)simcomRxBuffer[strlen(FARM)+15] -48)*10+((int)simcomRxBuffer[strlen(FARM)+16]-48);
 80002e0:	4b32      	ldr	r3, [pc, #200]	; (80003ac <HAL_UART_RxCpltCallback+0x14c>)
 80002e2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80002e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80002ea:	4613      	mov	r3, r2
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	005b      	lsls	r3, r3, #1
 80002f2:	461a      	mov	r2, r3
 80002f4:	4b2d      	ldr	r3, [pc, #180]	; (80003ac <HAL_UART_RxCpltCallback+0x14c>)
 80002f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80002fa:	3b30      	subs	r3, #48	; 0x30
 80002fc:	4413      	add	r3, r2
 80002fe:	4a2e      	ldr	r2, [pc, #184]	; (80003b8 <HAL_UART_RxCpltCallback+0x158>)
 8000300:	6013      	str	r3, [r2, #0]
					loadflag = 1;
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <HAL_UART_RxCpltCallback+0x15c>)
 8000304:	2201      	movs	r2, #1
 8000306:	601a      	str	r2, [r3, #0]
					break;
 8000308:	e03b      	b.n	8000382 <HAL_UART_RxCpltCallback+0x122>
				case 1:
					if((loadflag==1)&&(payLoadPin<=NUMBER_LOADS)){
 800030a:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <HAL_UART_RxCpltCallback+0x15c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d136      	bne.n	8000380 <HAL_UART_RxCpltCallback+0x120>
 8000312:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <HAL_UART_RxCpltCallback+0x158>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b04      	cmp	r3, #4
 8000318:	dc32      	bgt.n	8000380 <HAL_UART_RxCpltCallback+0x120>
						payLoadStatus = (int)simcomRxBuffer[0] -48;
 800031a:	4b24      	ldr	r3, [pc, #144]	; (80003ac <HAL_UART_RxCpltCallback+0x14c>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	3b30      	subs	r3, #48	; 0x30
 8000320:	4a27      	ldr	r2, [pc, #156]	; (80003c0 <HAL_UART_RxCpltCallback+0x160>)
 8000322:	6013      	str	r3, [r2, #0]
						if((payLoadStatus==0)||(payLoadStatus==1)){
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <HAL_UART_RxCpltCallback+0x160>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d003      	beq.n	8000334 <HAL_UART_RxCpltCallback+0xd4>
 800032c:	4b24      	ldr	r3, [pc, #144]	; (80003c0 <HAL_UART_RxCpltCallback+0x160>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d112      	bne.n	800035a <HAL_UART_RxCpltCallback+0xfa>
						HAL_GPIO_WritePin(GPIO_LOAD_PORT[payLoadPin-1],GPIO_LOAD_PIN[payLoadPin-1],payLoadStatus);
 8000334:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <HAL_UART_RxCpltCallback+0x158>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3b01      	subs	r3, #1
 800033a:	4a22      	ldr	r2, [pc, #136]	; (80003c4 <HAL_UART_RxCpltCallback+0x164>)
 800033c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <HAL_UART_RxCpltCallback+0x158>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3b01      	subs	r3, #1
 8000346:	4a20      	ldr	r2, [pc, #128]	; (80003c8 <HAL_UART_RxCpltCallback+0x168>)
 8000348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800034c:	b29b      	uxth	r3, r3
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <HAL_UART_RxCpltCallback+0x160>)
 8000350:	6812      	ldr	r2, [r2, #0]
 8000352:	b2d2      	uxtb	r2, r2
 8000354:	4619      	mov	r1, r3
 8000356:	f001 fc68 	bl	8001c2a <HAL_GPIO_WritePin>
						}
						//informPayloadToServer();
						loadflag = 0;
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <HAL_UART_RxCpltCallback+0x15c>)
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
					}
					break;
 8000360:	e00e      	b.n	8000380 <HAL_UART_RxCpltCallback+0x120>
				case 14:
					if(strstr((char *)simcomRxBuffer,"CMQTTPUB: 0,0")){
 8000362:	491a      	ldr	r1, [pc, #104]	; (80003cc <HAL_UART_RxCpltCallback+0x16c>)
 8000364:	4811      	ldr	r0, [pc, #68]	; (80003ac <HAL_UART_RxCpltCallback+0x14c>)
 8000366:	f003 fadd 	bl	8003924 <strstr>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d008      	beq.n	8000382 <HAL_UART_RxCpltCallback+0x122>
						IWDG->KR = 0xAAAA;
 8000370:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <HAL_UART_RxCpltCallback+0x170>)
 8000372:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000376:	601a      	str	r2, [r3, #0]
						ledStatusSendTopic=1;
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <HAL_UART_RxCpltCallback+0x174>)
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	e000      	b.n	8000382 <HAL_UART_RxCpltCallback+0x122>
					break;
 8000380:	bf00      	nop
					}
				default:
				}
			}
			rxDataCouter=0;
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <HAL_UART_RxCpltCallback+0x150>)
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
			rxIndex=0;
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <HAL_UART_RxCpltCallback+0x148>)
 800038a:	2200      	movs	r2, #0
 800038c:	801a      	strh	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart1, &rxData, 1);
 800038e:	2201      	movs	r2, #1
 8000390:	4904      	ldr	r1, [pc, #16]	; (80003a4 <HAL_UART_RxCpltCallback+0x144>)
 8000392:	4811      	ldr	r0, [pc, #68]	; (80003d8 <HAL_UART_RxCpltCallback+0x178>)
 8000394:	f002 fd0f 	bl	8002db6 <HAL_UART_Receive_IT>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40013800 	.word	0x40013800
 80003a4:	200003c0 	.word	0x200003c0
 80003a8:	200003c2 	.word	0x200003c2
 80003ac:	2000035c 	.word	0x2000035c
 80003b0:	20000358 	.word	0x20000358
 80003b4:	200003d0 	.word	0x200003d0
 80003b8:	20000350 	.word	0x20000350
 80003bc:	200003c4 	.word	0x200003c4
 80003c0:	20000354 	.word	0x20000354
 80003c4:	20000000 	.word	0x20000000
 80003c8:	20000010 	.word	0x20000010
 80003cc:	0800427c 	.word	0x0800427c
 80003d0:	40003000 	.word	0x40003000
 80003d4:	200003f8 	.word	0x200003f8
 80003d8:	2000029c 	.word	0x2000029c

080003dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 if(htim->Instance == htim6.Instance)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d106      	bne.n	80003fe <HAL_TIM_PeriodElapsedCallback+0x22>
 {
	 if(isConnectMQTT){
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <HAL_TIM_PeriodElapsedCallback+0x22>
		 sendPayloadStatusToServer=1;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	601a      	str	r2, [r3, #0]
	 }
 }
 HAL_TIM_Base_Start_IT(&htim6);
 80003fe:	4803      	ldr	r0, [pc, #12]	; (800040c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000400:	f002 f986 	bl	8002710 <HAL_TIM_Base_Start_IT>
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000254 	.word	0x20000254
 8000410:	200003d0 	.word	0x200003d0
 8000414:	200003d4 	.word	0x200003d4

08000418 <sendingToSimcomA76xx>:
void sendingToSimcomA76xx(char *cmd)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)cmd,strlen(cmd),1000);
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f7ff feff 	bl	8000224 <strlen>
 8000426:	4603      	mov	r3, r0
 8000428:	b29a      	uxth	r2, r3
 800042a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800042e:	6879      	ldr	r1, [r7, #4]
 8000430:	4803      	ldr	r0, [pc, #12]	; (8000440 <sendingToSimcomA76xx+0x28>)
 8000432:	f002 fc35 	bl	8002ca0 <HAL_UART_Transmit>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	2000029c 	.word	0x2000029c

08000444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000448:	f000 fd4a 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800044c:	f000 f842 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000450:	f000 f94c 	bl	80006ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000454:	f000 f892 	bl	800057c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000458:	f000 f91e 	bl	8000698 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800045c:	f000 f8e6 	bl	800062c <MX_TIM6_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData, 1);
 8000460:	2201      	movs	r2, #1
 8000462:	4915      	ldr	r1, [pc, #84]	; (80004b8 <main+0x74>)
 8000464:	4815      	ldr	r0, [pc, #84]	; (80004bc <main+0x78>)
 8000466:	f002 fca6 	bl	8002db6 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800046a:	4815      	ldr	r0, [pc, #84]	; (80004c0 <main+0x7c>)
 800046c:	f002 f950 	bl	8002710 <HAL_TIM_Base_Start_IT>
  turnOnA76XX();
 8000470:	f000 f9be 	bl	80007f0 <turnOnA76XX>
  HAL_GPIO_WritePin(ON_OFF_PWM_GPIO_Port,ON_OFF_PWM_Pin,0);
 8000474:	2200      	movs	r2, #0
 8000476:	2108      	movs	r1, #8
 8000478:	4812      	ldr	r0, [pc, #72]	; (80004c4 <main+0x80>)
 800047a:	f001 fbd6 	bl	8001c2a <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!isConnectSimcomA76xx){
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <main+0x84>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d104      	bne.n	8000490 <main+0x4c>
		  isConnectSimcomA76xx = connectSimcomA76xx();
 8000486:	f000 f9e1 	bl	800084c <connectSimcomA76xx>
 800048a:	4603      	mov	r3, r0
 800048c:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <main+0x84>)
 800048e:	6013      	str	r3, [r2, #0]
	  }
	  if(!isConnectMQTT){
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <main+0x88>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d104      	bne.n	80004a2 <main+0x5e>
		  isConnectMQTT = connectMQTT();
 8000498:	f000 fa56 	bl	8000948 <connectMQTT>
 800049c:	4603      	mov	r3, r0
 800049e:	4a0b      	ldr	r2, [pc, #44]	; (80004cc <main+0x88>)
 80004a0:	6013      	str	r3, [r2, #0]
	  }
	  if(sendPayloadStatusToServer == 1){
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <main+0x8c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d1e9      	bne.n	800047e <main+0x3a>
		  sendStatusPayloadToMQTT();
 80004aa:	f000 fb05 	bl	8000ab8 <sendStatusPayloadToMQTT>
		  sendPayloadStatusToServer= 0;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <main+0x8c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
	  if(!isConnectSimcomA76xx){
 80004b4:	e7e3      	b.n	800047e <main+0x3a>
 80004b6:	bf00      	nop
 80004b8:	200003c0 	.word	0x200003c0
 80004bc:	2000029c 	.word	0x2000029c
 80004c0:	20000254 	.word	0x20000254
 80004c4:	40010800 	.word	0x40010800
 80004c8:	200003cc 	.word	0x200003cc
 80004cc:	200003d0 	.word	0x200003d0
 80004d0:	200003d4 	.word	0x200003d4

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b096      	sub	sp, #88	; 0x58
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 fa16 	bl	8003914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	f107 031c 	add.w	r3, r7, #28
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]
 8000506:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000508:	230a      	movs	r3, #10
 800050a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050c:	2301      	movs	r3, #1
 800050e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000510:	2310      	movs	r3, #16
 8000512:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000514:	2301      	movs	r3, #1
 8000516:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000518:	2300      	movs	r3, #0
 800051a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000520:	4618      	mov	r0, r3
 8000522:	f001 fbdf 	bl	8001ce4 <HAL_RCC_OscConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800052c:	f000 fb4c 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000530:	230f      	movs	r3, #15
 8000532:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000534:	2300      	movs	r3, #0
 8000536:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000540:	2300      	movs	r3, #0
 8000542:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000544:	f107 031c 	add.w	r3, r7, #28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f001 fe4c 	bl	80021e8 <HAL_RCC_ClockConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000556:	f000 fb37 	bl	8000bc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800055a:	2302      	movs	r3, #2
 800055c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	4618      	mov	r0, r3
 8000566:	f001 ffcd 	bl	8002504 <HAL_RCCEx_PeriphCLKConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000570:	f000 fb2a 	bl	8000bc8 <Error_Handler>
  }
}
 8000574:	bf00      	nop
 8000576:	3758      	adds	r7, #88	; 0x58
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_ADC1_Init+0x74>)
 800058e:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <MX_ADC1_Init+0x78>)
 8000590:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <MX_ADC1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000598:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <MX_ADC1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_ADC1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <MX_ADC1_Init+0x74>)
 80005a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_ADC1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_ADC1_Init+0x74>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <MX_ADC1_Init+0x74>)
 80005ba:	f000 fd17 	bl	8000fec <HAL_ADC_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80005c4:	f000 fb00 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_ADC1_Init+0x74>)
 80005da:	f000 fdf1 	bl	80011c0 <HAL_ADC_ConfigChannel>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005e4:	f000 faf0 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000218 	.word	0x20000218
 80005f4:	40012400 	.word	0x40012400

080005f8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_IWDG_Init+0x2c>)
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <MX_IWDG_Init+0x30>)
 8000600:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_IWDG_Init+0x2c>)
 8000604:	2206      	movs	r2, #6
 8000606:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_IWDG_Init+0x2c>)
 800060a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800060e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_IWDG_Init+0x2c>)
 8000612:	f001 fb22 	bl	8001c5a <HAL_IWDG_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800061c:	f000 fad4 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000248 	.word	0x20000248
 8000628:	40003000 	.word	0x40003000

0800062c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_TIM6_Init+0x64>)
 800063c:	4a15      	ldr	r2, [pc, #84]	; (8000694 <MX_TIM6_Init+0x68>)
 800063e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39999;
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_TIM6_Init+0x64>)
 8000642:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000646:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_TIM6_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_TIM6_Init+0x64>)
 8000650:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000654:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_TIM6_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <MX_TIM6_Init+0x64>)
 800065e:	f002 f807 	bl	8002670 <HAL_TIM_Base_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000668:	f000 faae 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	4619      	mov	r1, r3
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_TIM6_Init+0x64>)
 800067a:	f002 fa43 	bl	8002b04 <HAL_TIMEx_MasterConfigSynchronization>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000684:	f000 faa0 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000254 	.word	0x20000254
 8000694:	40001000 	.word	0x40001000

08000698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART1_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_USART1_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART1_UART_Init+0x4c>)
 80006d0:	f002 fa96 	bl	8002c00 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 fa75 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000029c 	.word	0x2000029c
 80006e8:	40013800 	.word	0x40013800

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000700:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <MX_GPIO_Init+0xf4>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a36      	ldr	r2, [pc, #216]	; (80007e0 <MX_GPIO_Init+0xf4>)
 8000706:	f043 0320 	orr.w	r3, r3, #32
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <MX_GPIO_Init+0xf4>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0320 	and.w	r3, r3, #32
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <MX_GPIO_Init+0xf4>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a30      	ldr	r2, [pc, #192]	; (80007e0 <MX_GPIO_Init+0xf4>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <MX_GPIO_Init+0xf4>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000730:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_GPIO_Init+0xf4>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <MX_GPIO_Init+0xf4>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <MX_GPIO_Init+0xf4>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0310 	and.w	r3, r3, #16
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <MX_GPIO_Init+0xf4>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <MX_GPIO_Init+0xf4>)
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_GPIO_Init+0xf4>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0308 	and.w	r3, r3, #8
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ON_OFF_PWM_Pin|A76XX_PWRKEY_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f640 0108 	movw	r1, #2056	; 0x808
 8000766:	481f      	ldr	r0, [pc, #124]	; (80007e4 <MX_GPIO_Init+0xf8>)
 8000768:	f001 fa5f 	bl	8001c2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAYLOAD_4_Pin|PAYLOAD_3_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2130      	movs	r1, #48	; 0x30
 8000770:	481d      	ldr	r0, [pc, #116]	; (80007e8 <MX_GPIO_Init+0xfc>)
 8000772:	f001 fa5a 	bl	8001c2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAYLOAD_2_Pin|PAYLOAD_1_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2103      	movs	r1, #3
 800077a:	481c      	ldr	r0, [pc, #112]	; (80007ec <MX_GPIO_Init+0x100>)
 800077c:	f001 fa55 	bl	8001c2a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ON_OFF_PWM_Pin A76XX_PWRKEY_Pin */
  GPIO_InitStruct.Pin = ON_OFF_PWM_Pin|A76XX_PWRKEY_Pin;
 8000780:	f640 0308 	movw	r3, #2056	; 0x808
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	4812      	ldr	r0, [pc, #72]	; (80007e4 <MX_GPIO_Init+0xf8>)
 800079a:	f001 f89b 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_4_Pin PAYLOAD_3_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_4_Pin|PAYLOAD_3_Pin;
 800079e:	2330      	movs	r3, #48	; 0x30
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	4619      	mov	r1, r3
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <MX_GPIO_Init+0xfc>)
 80007b6:	f001 f88d 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_2_Pin PAYLOAD_1_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_2_Pin|PAYLOAD_1_Pin;
 80007ba:	2303      	movs	r3, #3
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <MX_GPIO_Init+0x100>)
 80007d2:	f001 f87f 	bl	80018d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d6:	bf00      	nop
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010800 	.word	0x40010800
 80007e8:	40011000 	.word	0x40011000
 80007ec:	40010c00 	.word	0x40010c00

080007f0 <turnOnA76XX>:

/* USER CODE BEGIN 4 */
void turnOnA76XX(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007fa:	4813      	ldr	r0, [pc, #76]	; (8000848 <turnOnA76XX+0x58>)
 80007fc:	f001 fa15 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000800:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000804:	f000 fbce 	bl	8000fa4 <HAL_Delay>
	HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <turnOnA76XX+0x58>)
 8000810:	f001 fa0b 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000814:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000818:	f000 fbc4 	bl	8000fa4 <HAL_Delay>
	HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <turnOnA76XX+0x58>)
 8000824:	f001 fa01 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000828:	20c8      	movs	r0, #200	; 0xc8
 800082a:	f000 fbbb 	bl	8000fa4 <HAL_Delay>
	HAL_GPIO_WritePin(A76XX_PWRKEY_GPIO_Port, A76XX_PWRKEY_Pin, RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <turnOnA76XX+0x58>)
 8000836:	f001 f9f8 	bl	8001c2a <HAL_GPIO_WritePin>
	HAL_Delay(10000);
 800083a:	f242 7010 	movw	r0, #10000	; 0x2710
 800083e:	f000 fbb1 	bl	8000fa4 <HAL_Delay>

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40010800 	.word	0x40010800

0800084c <connectSimcomA76xx>:
int connectSimcomA76xx(){
 800084c:	b598      	push	{r3, r4, r7, lr}
 800084e:	af00      	add	r7, sp, #0
	previousTick =  HAL_GetTick();
 8000850:	f000 fb9e 	bl	8000f90 <HAL_GetTick>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b30      	ldr	r3, [pc, #192]	; (800091c <connectSimcomA76xx+0xd0>)
 800085a:	601a      	str	r2, [r3, #0]
	while(isConnectSimcomA76xx == 0 && previousTick  + timeOutConnectA76XX >  HAL_GetTick()){
 800085c:	e045      	b.n	80008ea <connectSimcomA76xx+0x9e>
		if(strstr((char *)simcomRxBuffer,"PB DONE")){
 800085e:	4930      	ldr	r1, [pc, #192]	; (8000920 <connectSimcomA76xx+0xd4>)
 8000860:	4830      	ldr	r0, [pc, #192]	; (8000924 <connectSimcomA76xx+0xd8>)
 8000862:	f003 f85f 	bl	8003924 <strstr>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d002      	beq.n	8000872 <connectSimcomA76xx+0x26>
			isPBDONE = 1;
 800086c:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <connectSimcomA76xx+0xdc>)
 800086e:	2201      	movs	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
		}
//		if(strstr((char *)simcomRxBuffer,"PDN ACT 1")){
//			isPBDONE = 1;
//			HAL_Delay(5000);
//		}
		if(isPBDONE==1){
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <connectSimcomA76xx+0xdc>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d11b      	bne.n	80008b2 <connectSimcomA76xx+0x66>
			HAL_Delay(3000);
 800087a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800087e:	f000 fb91 	bl	8000fa4 <HAL_Delay>
			memset(simcomRxBuffer,'0',100);
 8000882:	2264      	movs	r2, #100	; 0x64
 8000884:	2130      	movs	r1, #48	; 0x30
 8000886:	4827      	ldr	r0, [pc, #156]	; (8000924 <connectSimcomA76xx+0xd8>)
 8000888:	f003 f844 	bl	8003914 <memset>
			HAL_Delay(200);
 800088c:	20c8      	movs	r0, #200	; 0xc8
 800088e:	f000 fb89 	bl	8000fa4 <HAL_Delay>
			sendingToSimcomA76xx(AT_CHECK_A76XX);
 8000892:	4826      	ldr	r0, [pc, #152]	; (800092c <connectSimcomA76xx+0xe0>)
 8000894:	f7ff fdc0 	bl	8000418 <sendingToSimcomA76xx>
			HAL_Delay(200);
 8000898:	20c8      	movs	r0, #200	; 0xc8
 800089a:	f000 fb83 	bl	8000fa4 <HAL_Delay>
			if(strstr((char *)simcomRxBuffer,"OK")){
 800089e:	4924      	ldr	r1, [pc, #144]	; (8000930 <connectSimcomA76xx+0xe4>)
 80008a0:	4820      	ldr	r0, [pc, #128]	; (8000924 <connectSimcomA76xx+0xd8>)
 80008a2:	f003 f83f 	bl	8003924 <strstr>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <connectSimcomA76xx+0x66>
				isATOK = 1;
 80008ac:	4b21      	ldr	r3, [pc, #132]	; (8000934 <connectSimcomA76xx+0xe8>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	601a      	str	r2, [r3, #0]
			}
		}
		if(isATOK==1){
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <connectSimcomA76xx+0xe8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d117      	bne.n	80008ea <connectSimcomA76xx+0x9e>
			memset(simcomRxBuffer,'0',100);
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	2130      	movs	r1, #48	; 0x30
 80008be:	4819      	ldr	r0, [pc, #100]	; (8000924 <connectSimcomA76xx+0xd8>)
 80008c0:	f003 f828 	bl	8003914 <memset>
			HAL_Delay(200);
 80008c4:	20c8      	movs	r0, #200	; 0xc8
 80008c6:	f000 fb6d 	bl	8000fa4 <HAL_Delay>
			sendingToSimcomA76xx(AT_CHECK_ESIM);
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <connectSimcomA76xx+0xec>)
 80008cc:	f7ff fda4 	bl	8000418 <sendingToSimcomA76xx>
			HAL_Delay(200);
 80008d0:	20c8      	movs	r0, #200	; 0xc8
 80008d2:	f000 fb67 	bl	8000fa4 <HAL_Delay>
			if(strstr((char *)simcomRxBuffer,"OKGREG: 0,1")){
 80008d6:	4919      	ldr	r1, [pc, #100]	; (800093c <connectSimcomA76xx+0xf0>)
 80008d8:	4812      	ldr	r0, [pc, #72]	; (8000924 <connectSimcomA76xx+0xd8>)
 80008da:	f003 f823 	bl	8003924 <strstr>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d002      	beq.n	80008ea <connectSimcomA76xx+0x9e>
				isConnectSimcomA76xx = 1;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <connectSimcomA76xx+0xf4>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
	while(isConnectSimcomA76xx == 0 && previousTick  + timeOutConnectA76XX >  HAL_GetTick()){
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <connectSimcomA76xx+0xf4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10a      	bne.n	8000908 <connectSimcomA76xx+0xbc>
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <connectSimcomA76xx+0xd0>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <connectSimcomA76xx+0xf8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	461c      	mov	r4, r3
 80008fe:	f000 fb47 	bl	8000f90 <HAL_GetTick>
 8000902:	4603      	mov	r3, r0
 8000904:	429c      	cmp	r4, r3
 8000906:	d8aa      	bhi.n	800085e <connectSimcomA76xx+0x12>
			}
		}
	}
	if(isConnectSimcomA76xx==0){
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <connectSimcomA76xx+0xf4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <connectSimcomA76xx+0xc8>
		NVIC_SystemReset();
 8000910:	f7ff fc90 	bl	8000234 <__NVIC_SystemReset>
	}

	return isConnectSimcomA76xx;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <connectSimcomA76xx+0xf4>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	bd98      	pop	{r3, r4, r7, pc}
 800091c:	200003c8 	.word	0x200003c8
 8000920:	0800428c 	.word	0x0800428c
 8000924:	2000035c 	.word	0x2000035c
 8000928:	2000034c 	.word	0x2000034c
 800092c:	20000020 	.word	0x20000020
 8000930:	08004294 	.word	0x08004294
 8000934:	20000348 	.word	0x20000348
 8000938:	20000028 	.word	0x20000028
 800093c:	08004298 	.word	0x08004298
 8000940:	200003cc 	.word	0x200003cc
 8000944:	20000198 	.word	0x20000198

08000948 <connectMQTT>:

int connectMQTT(void){
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b085      	sub	sp, #20
 800094c:	af02      	add	r7, sp, #8
	sendingToSimcomA76xx(AT_START_MQTT);
 800094e:	4848      	ldr	r0, [pc, #288]	; (8000a70 <connectMQTT+0x128>)
 8000950:	f7ff fd62 	bl	8000418 <sendingToSimcomA76xx>
	HAL_Delay(200);
 8000954:	20c8      	movs	r0, #200	; 0xc8
 8000956:	f000 fb25 	bl	8000fa4 <HAL_Delay>
	sprintf(AT_COMMAND,AT_ACQUIRE_CLIENT,MQTT_CLIENT_ID);
 800095a:	4a46      	ldr	r2, [pc, #280]	; (8000a74 <connectMQTT+0x12c>)
 800095c:	4946      	ldr	r1, [pc, #280]	; (8000a78 <connectMQTT+0x130>)
 800095e:	4847      	ldr	r0, [pc, #284]	; (8000a7c <connectMQTT+0x134>)
 8000960:	f002 ffb8 	bl	80038d4 <siprintf>
	sendingToSimcomA76xx(AT_COMMAND);
 8000964:	4845      	ldr	r0, [pc, #276]	; (8000a7c <connectMQTT+0x134>)
 8000966:	f7ff fd57 	bl	8000418 <sendingToSimcomA76xx>
	HAL_Delay(200);
 800096a:	20c8      	movs	r0, #200	; 0xc8
 800096c:	f000 fb1a 	bl	8000fa4 <HAL_Delay>
	sprintf(AT_COMMAND,AT_CONNECT_MQTT,MQTT_HOST,MQTT_PORT,MQTT_USER,MQTT_PASS);
 8000970:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <connectMQTT+0x138>)
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <connectMQTT+0x13c>)
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	f240 735b 	movw	r3, #1883	; 0x75b
 800097c:	4a42      	ldr	r2, [pc, #264]	; (8000a88 <connectMQTT+0x140>)
 800097e:	4943      	ldr	r1, [pc, #268]	; (8000a8c <connectMQTT+0x144>)
 8000980:	483e      	ldr	r0, [pc, #248]	; (8000a7c <connectMQTT+0x134>)
 8000982:	f002 ffa7 	bl	80038d4 <siprintf>
	sendingToSimcomA76xx(AT_COMMAND);
 8000986:	483d      	ldr	r0, [pc, #244]	; (8000a7c <connectMQTT+0x134>)
 8000988:	f7ff fd46 	bl	8000418 <sendingToSimcomA76xx>
	HAL_Delay(200);
 800098c:	20c8      	movs	r0, #200	; 0xc8
 800098e:	f000 fb09 	bl	8000fa4 <HAL_Delay>
	for(int i=1;i<NUMBER_LOADS+1;i++){
 8000992:	2301      	movs	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	e05c      	b.n	8000a52 <connectMQTT+0x10a>
		isConnectMQTT = 0;
 8000998:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <connectMQTT+0x148>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
		previousTick =  HAL_GetTick();
 800099e:	f000 faf7 	bl	8000f90 <HAL_GetTick>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <connectMQTT+0x14c>)
 80009a8:	601a      	str	r2, [r3, #0]
		if(i>9){
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b09      	cmp	r3, #9
 80009ae:	dd0b      	ble.n	80009c8 <connectMQTT+0x80>
			sprintf(AT_COMMAND,AT_SET_SUBCRIBE_10_18_TOPIC,strlen(FARM)+17);
 80009b0:	2224      	movs	r2, #36	; 0x24
 80009b2:	4939      	ldr	r1, [pc, #228]	; (8000a98 <connectMQTT+0x150>)
 80009b4:	4831      	ldr	r0, [pc, #196]	; (8000a7c <connectMQTT+0x134>)
 80009b6:	f002 ff8d 	bl	80038d4 <siprintf>
			sendingToSimcomA76xx(AT_COMMAND);
 80009ba:	4830      	ldr	r0, [pc, #192]	; (8000a7c <connectMQTT+0x134>)
 80009bc:	f7ff fd2c 	bl	8000418 <sendingToSimcomA76xx>
			HAL_Delay(200);
 80009c0:	20c8      	movs	r0, #200	; 0xc8
 80009c2:	f000 faef 	bl	8000fa4 <HAL_Delay>
 80009c6:	e007      	b.n	80009d8 <connectMQTT+0x90>
		}
		else{
			sprintf(AT_COMMAND,AT_SET_SUBCRIBE_0_9_TOPIC,strlen(FARM)+16);//
 80009c8:	2223      	movs	r2, #35	; 0x23
 80009ca:	4934      	ldr	r1, [pc, #208]	; (8000a9c <connectMQTT+0x154>)
 80009cc:	482b      	ldr	r0, [pc, #172]	; (8000a7c <connectMQTT+0x134>)
 80009ce:	f002 ff81 	bl	80038d4 <siprintf>
			sendingToSimcomA76xx(AT_COMMAND);
 80009d2:	482a      	ldr	r0, [pc, #168]	; (8000a7c <connectMQTT+0x134>)
 80009d4:	f7ff fd20 	bl	8000418 <sendingToSimcomA76xx>
		}
		HAL_Delay(200);
 80009d8:	20c8      	movs	r0, #200	; 0xc8
 80009da:	f000 fae3 	bl	8000fa4 <HAL_Delay>
		sprintf(AT_COMMAND,AT_SUBCRIBE_TOPIC,MQTT_TOPIC_ACTUATOR_CONTROL,i);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <connectMQTT+0x158>)
 80009e2:	4930      	ldr	r1, [pc, #192]	; (8000aa4 <connectMQTT+0x15c>)
 80009e4:	4825      	ldr	r0, [pc, #148]	; (8000a7c <connectMQTT+0x134>)
 80009e6:	f002 ff75 	bl	80038d4 <siprintf>
		sendingToSimcomA76xx(AT_COMMAND);
 80009ea:	4824      	ldr	r0, [pc, #144]	; (8000a7c <connectMQTT+0x134>)
 80009ec:	f7ff fd14 	bl	8000418 <sendingToSimcomA76xx>
		HAL_Delay(200);
 80009f0:	20c8      	movs	r0, #200	; 0xc8
 80009f2:	f000 fad7 	bl	8000fa4 <HAL_Delay>
		memset(simcomRxBuffer,'0',100);
 80009f6:	2264      	movs	r2, #100	; 0x64
 80009f8:	2130      	movs	r1, #48	; 0x30
 80009fa:	482b      	ldr	r0, [pc, #172]	; (8000aa8 <connectMQTT+0x160>)
 80009fc:	f002 ff8a 	bl	8003914 <memset>
		sendingToSimcomA76xx(AT_SUBCRIBE);
 8000a00:	482a      	ldr	r0, [pc, #168]	; (8000aac <connectMQTT+0x164>)
 8000a02:	f7ff fd09 	bl	8000418 <sendingToSimcomA76xx>
		HAL_Delay(200);
 8000a06:	20c8      	movs	r0, #200	; 0xc8
 8000a08:	f000 facc 	bl	8000fa4 <HAL_Delay>
		while(isConnectMQTT == 0 && previousTick  + timeOutConnectMQTT >  HAL_GetTick()){
 8000a0c:	e009      	b.n	8000a22 <connectMQTT+0xda>

			if(strstr((char *)simcomRxBuffer,"CMQTTSUB: 0,0")){
 8000a0e:	4928      	ldr	r1, [pc, #160]	; (8000ab0 <connectMQTT+0x168>)
 8000a10:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <connectMQTT+0x160>)
 8000a12:	f002 ff87 	bl	8003924 <strstr>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d002      	beq.n	8000a22 <connectMQTT+0xda>
					isConnectMQTT=1;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <connectMQTT+0x148>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
		while(isConnectMQTT == 0 && previousTick  + timeOutConnectMQTT >  HAL_GetTick()){
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <connectMQTT+0x148>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10a      	bne.n	8000a40 <connectMQTT+0xf8>
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <connectMQTT+0x14c>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <connectMQTT+0x16c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	461c      	mov	r4, r3
 8000a36:	f000 faab 	bl	8000f90 <HAL_GetTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	429c      	cmp	r4, r3
 8000a3e:	d8e6      	bhi.n	8000a0e <connectMQTT+0xc6>
			}
		}
		if(isConnectMQTT==0){
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <connectMQTT+0x148>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <connectMQTT+0x104>
			NVIC_SystemReset();;
 8000a48:	f7ff fbf4 	bl	8000234 <__NVIC_SystemReset>
	for(int i=1;i<NUMBER_LOADS+1;i++){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	dd9f      	ble.n	8000998 <connectMQTT+0x50>
		}
	}
	if(isConnectMQTT==1){
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <connectMQTT+0x148>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d101      	bne.n	8000a64 <connectMQTT+0x11c>
		MX_IWDG_Init();
 8000a60:	f7ff fdca 	bl	80005f8 <MX_IWDG_Init>
	}
	return isConnectMQTT;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <connectMQTT+0x148>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	20000034 	.word	0x20000034
 8000a74:	080042a4 	.word	0x080042a4
 8000a78:	20000044 	.word	0x20000044
 8000a7c:	200002e4 	.word	0x200002e4
 8000a80:	080042cc 	.word	0x080042cc
 8000a84:	080042d4 	.word	0x080042d4
 8000a88:	080042b0 	.word	0x080042b0
 8000a8c:	2000005c 	.word	0x2000005c
 8000a90:	200003d0 	.word	0x200003d0
 8000a94:	200003c8 	.word	0x200003c8
 8000a98:	200000ec 	.word	0x200000ec
 8000a9c:	200000d0 	.word	0x200000d0
 8000aa0:	080042e0 	.word	0x080042e0
 8000aa4:	20000108 	.word	0x20000108
 8000aa8:	2000035c 	.word	0x2000035c
 8000aac:	20000110 	.word	0x20000110
 8000ab0:	08004304 	.word	0x08004304
 8000ab4:	2000019c 	.word	0x2000019c

08000ab8 <sendStatusPayloadToMQTT>:
int sendStatusPayloadToMQTT(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	//lengthOfStatusPayloadArray = (7*NUMBER_LOADS) +(NUMBER_LOADS-1)+2;
	//STATUS_PAYLOAD_ARRAY[lengthOfStatusPayloadArray];
	if(NUMBER_LOADS<10){
		memcpy(STATUS_PAYLOAD_ARRAY_0_9,STATUS_PAYLOAD_ARRAY_TOTAL,LENGTH_STATUS_PAYLOAD_0_9-1);
 8000abe:	2218      	movs	r2, #24
 8000ac0:	4936      	ldr	r1, [pc, #216]	; (8000b9c <sendStatusPayloadToMQTT+0xe4>)
 8000ac2:	4837      	ldr	r0, [pc, #220]	; (8000ba0 <sendStatusPayloadToMQTT+0xe8>)
 8000ac4:	f002 ff70 	bl	80039a8 <memcpy>
		STATUS_PAYLOAD_ARRAY_0_9[LENGTH_STATUS_PAYLOAD_0_9-1] = '}';
 8000ac8:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <sendStatusPayloadToMQTT+0xe8>)
 8000aca:	227d      	movs	r2, #125	; 0x7d
 8000acc:	761a      	strb	r2, [r3, #24]
		for(int i=1;i<NUMBER_LOADS+1;i++){
 8000ace:	2301      	movs	r3, #1
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	e023      	b.n	8000b1c <sendStatusPayloadToMQTT+0x64>
				statusOfLoad = HAL_GPIO_ReadPin(GPIO_LOAD_PORT[i-1], GPIO_LOAD_PIN[i-1]);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	4a32      	ldr	r2, [pc, #200]	; (8000ba4 <sendStatusPayloadToMQTT+0xec>)
 8000ada:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	4931      	ldr	r1, [pc, #196]	; (8000ba8 <sendStatusPayloadToMQTT+0xf0>)
 8000ae4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	4619      	mov	r1, r3
 8000aec:	4610      	mov	r0, r2
 8000aee:	f001 f885 	bl	8001bfc <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <sendStatusPayloadToMQTT+0xf4>)
 8000af8:	601a      	str	r2, [r3, #0]
				STATUS_PAYLOAD_ARRAY_0_9[i*6-1] = statusOfLoad+48;
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <sendStatusPayloadToMQTT+0xf4>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	b2d9      	uxtb	r1, r3
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8000b10:	b2d1      	uxtb	r1, r2
 8000b12:	4a23      	ldr	r2, [pc, #140]	; (8000ba0 <sendStatusPayloadToMQTT+0xe8>)
 8000b14:	54d1      	strb	r1, [r2, r3]
		for(int i=1;i<NUMBER_LOADS+1;i++){
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	ddd8      	ble.n	8000ad4 <sendStatusPayloadToMQTT+0x1c>
		}
		sprintf(AT_COMMAND,AT_SET_PUBLISH_TOPIC,strlen(MQTT_TOPIC_ACTUATOR_STATUS)); // Set the topic for publish message
 8000b22:	2223      	movs	r2, #35	; 0x23
 8000b24:	4922      	ldr	r1, [pc, #136]	; (8000bb0 <sendStatusPayloadToMQTT+0xf8>)
 8000b26:	4823      	ldr	r0, [pc, #140]	; (8000bb4 <sendStatusPayloadToMQTT+0xfc>)
 8000b28:	f002 fed4 	bl	80038d4 <siprintf>
		sendingToSimcomA76xx(AT_COMMAND);
 8000b2c:	4821      	ldr	r0, [pc, #132]	; (8000bb4 <sendStatusPayloadToMQTT+0xfc>)
 8000b2e:	f7ff fc73 	bl	8000418 <sendingToSimcomA76xx>
		HAL_Delay(500);
 8000b32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b36:	f000 fa35 	bl	8000fa4 <HAL_Delay>
		sprintf(AT_COMMAND,"%s\r\n",MQTT_TOPIC_ACTUATOR_STATUS);
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <sendStatusPayloadToMQTT+0x100>)
 8000b3c:	491f      	ldr	r1, [pc, #124]	; (8000bbc <sendStatusPayloadToMQTT+0x104>)
 8000b3e:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <sendStatusPayloadToMQTT+0xfc>)
 8000b40:	f002 fec8 	bl	80038d4 <siprintf>
		sendingToSimcomA76xx(AT_COMMAND);
 8000b44:	481b      	ldr	r0, [pc, #108]	; (8000bb4 <sendStatusPayloadToMQTT+0xfc>)
 8000b46:	f7ff fc67 	bl	8000418 <sendingToSimcomA76xx>
		HAL_Delay(500);
 8000b4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b4e:	f000 fa29 	bl	8000fa4 <HAL_Delay>

		//sprintf(AT_COMMAND,STATUS_PAYLOAD_ARRAY_0_9,payLoadPin,payLoadStatus);
		int lengthOfInformPayload = strlen(STATUS_PAYLOAD_ARRAY_0_9);
 8000b52:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <sendStatusPayloadToMQTT+0xe8>)
 8000b54:	f7ff fb66 	bl	8000224 <strlen>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	603b      	str	r3, [r7, #0]

		sprintf(AT_COMMAND,AT_SET_PUBLISH_PAYLOAD,lengthOfInformPayload);
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	4918      	ldr	r1, [pc, #96]	; (8000bc0 <sendStatusPayloadToMQTT+0x108>)
 8000b60:	4814      	ldr	r0, [pc, #80]	; (8000bb4 <sendStatusPayloadToMQTT+0xfc>)
 8000b62:	f002 feb7 	bl	80038d4 <siprintf>
		sendingToSimcomA76xx(AT_COMMAND);
 8000b66:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <sendStatusPayloadToMQTT+0xfc>)
 8000b68:	f7ff fc56 	bl	8000418 <sendingToSimcomA76xx>
		HAL_Delay(500);
 8000b6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b70:	f000 fa18 	bl	8000fa4 <HAL_Delay>
		//sprintf(AT_COMMAND,AT_INFORM_PAYLOAD,payLoadPin,payLoadStatus);
		sendingToSimcomA76xx(STATUS_PAYLOAD_ARRAY_0_9);
 8000b74:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <sendStatusPayloadToMQTT+0xe8>)
 8000b76:	f7ff fc4f 	bl	8000418 <sendingToSimcomA76xx>
		HAL_Delay(500);// Set the payload
 8000b7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7e:	f000 fa11 	bl	8000fa4 <HAL_Delay>
		sendingToSimcomA76xx(AT_PUBLISH);
 8000b82:	4810      	ldr	r0, [pc, #64]	; (8000bc4 <sendStatusPayloadToMQTT+0x10c>)
 8000b84:	f7ff fc48 	bl	8000418 <sendingToSimcomA76xx>
		HAL_Delay(500);
 8000b88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b8c:	f000 fa0a 	bl	8000fa4 <HAL_Delay>
//		HAL_Delay(500);
//		ledStatus('G');
//		ledStatusSendTopic= 0;
//	}
	//sendPayloadStatusToServer = 0;
	return 1;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000120 	.word	0x20000120
 8000ba0:	200003d8 	.word	0x200003d8
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000010 	.word	0x20000010
 8000bac:	200003f4 	.word	0x200003f4
 8000bb0:	20000088 	.word	0x20000088
 8000bb4:	200002e4 	.word	0x200002e4
 8000bb8:	08004314 	.word	0x08004314
 8000bbc:	08004338 	.word	0x08004338
 8000bc0:	200000a0 	.word	0x200000a0
 8000bc4:	200000b8 	.word	0x200000b8

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <HAL_MspInit+0x5c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_MspInit+0x5c>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	61d3      	str	r3, [r2, #28]
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_MspInit+0x5c>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_MspInit+0x60>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_MspInit+0x60>)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000

08000c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <HAL_ADC_MspInit+0x6c>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d121      	bne.n	8000c9c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <HAL_ADC_MspInit+0x70>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <HAL_ADC_MspInit+0x70>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <HAL_ADC_MspInit+0x70>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <HAL_ADC_MspInit+0x70>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <HAL_ADC_MspInit+0x70>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_ADC_MspInit+0x70>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4619      	mov	r1, r3
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_ADC_MspInit+0x74>)
 8000c98:	f000 fe1c 	bl	80018d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40012400 	.word	0x40012400
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010800 	.word	0x40010800

08000cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_TIM_Base_MspInit+0x44>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d113      	bne.n	8000cea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_TIM_Base_MspInit+0x48>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <HAL_TIM_Base_MspInit+0x48>)
 8000cc8:	f043 0310 	orr.w	r3, r3, #16
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_TIM_Base_MspInit+0x48>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2036      	movs	r0, #54	; 0x36
 8000ce0:	f000 fc7f 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000ce4:	2036      	movs	r0, #54	; 0x36
 8000ce6:	f000 fc98 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40001000 	.word	0x40001000
 8000cf8:	40021000 	.word	0x40021000

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a20      	ldr	r2, [pc, #128]	; (8000d98 <HAL_UART_MspInit+0x9c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d139      	bne.n	8000d90 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <HAL_UART_MspInit+0xa0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a1e      	ldr	r2, [pc, #120]	; (8000d9c <HAL_UART_MspInit+0xa0>)
 8000d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <HAL_UART_MspInit+0xa0>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <HAL_UART_MspInit+0xa0>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <HAL_UART_MspInit+0xa0>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_UART_MspInit+0xa0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480f      	ldr	r0, [pc, #60]	; (8000da0 <HAL_UART_MspInit+0xa4>)
 8000d62:	f000 fdb7 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4809      	ldr	r0, [pc, #36]	; (8000da0 <HAL_UART_MspInit+0xa4>)
 8000d7c:	f000 fdaa 	bl	80018d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2025      	movs	r0, #37	; 0x25
 8000d86:	f000 fc2c 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d8a:	2025      	movs	r0, #37	; 0x25
 8000d8c:	f000 fc45 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40013800 	.word	0x40013800
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010800 	.word	0x40010800

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dea:	f000 f8bf 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <USART1_IRQHandler+0x10>)
 8000dfa:	f002 f801 	bl	8002e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000029c 	.word	0x2000029c

08000e08 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <TIM6_IRQHandler+0x10>)
 8000e0e:	f001 fcdf 	bl	80027d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000254 	.word	0x20000254

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f002 fd80 	bl	8003950 <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20010000 	.word	0x20010000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	200003fc 	.word	0x200003fc
 8000e84:	20000550 	.word	0x20000550

08000e88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e94:	f7ff fff8 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e9a:	490c      	ldr	r1, [pc, #48]	; (8000ecc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eb0:	4c09      	ldr	r4, [pc, #36]	; (8000ed8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f002 fd4d 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec2:	f7ff fabf 	bl	8000444 <main>
  bx lr
 8000ec6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8000ed0:	080043a8 	.word	0x080043a8
  ldr r2, =_sbss
 8000ed4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8000ed8:	2000054c 	.word	0x2000054c

08000edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_2_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x28>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x28>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 fb6b 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fe6a 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40022000 	.word	0x40022000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fb83 	bl	8001636 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f48:	f000 fb4b 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200001a0 	.word	0x200001a0
 8000f64:	200001a8 	.word	0x200001a8
 8000f68:	200001a4 	.word	0x200001a4

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a03      	ldr	r2, [pc, #12]	; (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	200001a8 	.word	0x200001a8
 8000f8c:	20000400 	.word	0x20000400

08000f90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	; (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000400 	.word	0x20000400

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff fff0 	bl	8000f90 <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffe0 	bl	8000f90 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001a8 	.word	0x200001a8

08000fec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0ce      	b.n	80011ac <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	2b00      	cmp	r3, #0
 800101a:	d109      	bne.n	8001030 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fe04 	bl	8000c38 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f9bd 	bl	80013b0 <ADC_ConversionStop_Disable>
 8001036:	4603      	mov	r3, r0
 8001038:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 80a9 	bne.w	800119a <HAL_ADC_Init+0x1ae>
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f040 80a5 	bne.w	800119a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001058:	f023 0302 	bic.w	r3, r3, #2
 800105c:	f043 0202 	orr.w	r2, r3, #2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4951      	ldr	r1, [pc, #324]	; (80011b4 <HAL_ADC_Init+0x1c8>)
 800106e:	428b      	cmp	r3, r1
 8001070:	d10a      	bne.n	8001088 <HAL_ADC_Init+0x9c>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800107a:	d002      	beq.n	8001082 <HAL_ADC_Init+0x96>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	e004      	b.n	800108c <HAL_ADC_Init+0xa0>
 8001082:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001086:	e001      	b.n	800108c <HAL_ADC_Init+0xa0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800108c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7b1b      	ldrb	r3, [r3, #12]
 8001092:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001094:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	4313      	orrs	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a4:	d003      	beq.n	80010ae <HAL_ADC_Init+0xc2>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <HAL_ADC_Init+0xc8>
 80010ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b2:	e000      	b.n	80010b6 <HAL_ADC_Init+0xca>
 80010b4:	2300      	movs	r3, #0
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7d1b      	ldrb	r3, [r3, #20]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d119      	bne.n	80010f8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7b1b      	ldrb	r3, [r3, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d109      	bne.n	80010e0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	035a      	lsls	r2, r3, #13
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	e00b      	b.n	80010f8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	f043 0220 	orr.w	r2, r3, #32
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	f043 0201 	orr.w	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	430a      	orrs	r2, r1
 800110a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <HAL_ADC_Init+0x1cc>)
 8001114:	4013      	ands	r3, r2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	430b      	orrs	r3, r1
 800111e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001128:	d003      	beq.n	8001132 <HAL_ADC_Init+0x146>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d104      	bne.n	800113c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	3b01      	subs	r3, #1
 8001138:	051b      	lsls	r3, r3, #20
 800113a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	430a      	orrs	r2, r1
 800114e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_ADC_Init+0x1d0>)
 8001158:	4013      	ands	r3, r2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	d10b      	bne.n	8001178 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116a:	f023 0303 	bic.w	r3, r3, #3
 800116e:	f043 0201 	orr.w	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001176:	e018      	b.n	80011aa <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	f023 0312 	bic.w	r3, r3, #18
 8001180:	f043 0210 	orr.w	r2, r3, #16
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	f043 0201 	orr.w	r2, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001198:	e007      	b.n	80011aa <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119e:	f043 0210 	orr.w	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40013c00 	.word	0x40013c00
 80011b8:	ffe1f7fd 	.word	0xffe1f7fd
 80011bc:	ff1f0efe 	.word	0xff1f0efe

080011c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x20>
 80011dc:	2302      	movs	r3, #2
 80011de:	e0dc      	b.n	800139a <HAL_ADC_ConfigChannel+0x1da>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b06      	cmp	r3, #6
 80011ee:	d81c      	bhi.n	800122a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	3b05      	subs	r3, #5
 8001202:	221f      	movs	r2, #31
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	4019      	ands	r1, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b05      	subs	r3, #5
 800121c:	fa00 f203 	lsl.w	r2, r0, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
 8001228:	e03c      	b.n	80012a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b0c      	cmp	r3, #12
 8001230:	d81c      	bhi.n	800126c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	3b23      	subs	r3, #35	; 0x23
 8001244:	221f      	movs	r2, #31
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	4019      	ands	r1, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	3b23      	subs	r3, #35	; 0x23
 800125e:	fa00 f203 	lsl.w	r2, r0, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	631a      	str	r2, [r3, #48]	; 0x30
 800126a:	e01b      	b.n	80012a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b41      	subs	r3, #65	; 0x41
 800127e:	221f      	movs	r2, #31
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	4019      	ands	r1, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	3b41      	subs	r3, #65	; 0x41
 8001298:	fa00 f203 	lsl.w	r2, r0, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	430a      	orrs	r2, r1
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b09      	cmp	r3, #9
 80012aa:	d91c      	bls.n	80012e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68d9      	ldr	r1, [r3, #12]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	3b1e      	subs	r3, #30
 80012be:	2207      	movs	r2, #7
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4019      	ands	r1, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6898      	ldr	r0, [r3, #8]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	3b1e      	subs	r3, #30
 80012d8:	fa00 f203 	lsl.w	r2, r0, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	e019      	b.n	800131a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6919      	ldr	r1, [r3, #16]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	2207      	movs	r2, #7
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4019      	ands	r1, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6898      	ldr	r0, [r3, #8]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	fa00 f203 	lsl.w	r2, r0, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b10      	cmp	r3, #16
 8001320:	d003      	beq.n	800132a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001326:	2b11      	cmp	r3, #17
 8001328:	d132      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d125      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d126      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001350:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b10      	cmp	r3, #16
 8001358:	d11a      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_ADC_ConfigChannel+0x1e8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a13      	ldr	r2, [pc, #76]	; (80013ac <HAL_ADC_ConfigChannel+0x1ec>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	0c9a      	lsrs	r2, r3, #18
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001370:	e002      	b.n	8001378 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3b01      	subs	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f9      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x1b2>
 800137e:	e007      	b.n	8001390 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	f043 0220 	orr.w	r2, r3, #32
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40012400 	.word	0x40012400
 80013a8:	200001a0 	.word	0x200001a0
 80013ac:	431bde83 	.word	0x431bde83

080013b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d12e      	bne.n	8001428 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0201 	bic.w	r2, r2, #1
 80013d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013da:	f7ff fdd9 	bl	8000f90 <HAL_GetTick>
 80013de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013e0:	e01b      	b.n	800141a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013e2:	f7ff fdd5 	bl	8000f90 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d914      	bls.n	800141a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10d      	bne.n	800141a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	f043 0210 	orr.w	r2, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	f043 0201 	orr.w	r2, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e007      	b.n	800142a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b01      	cmp	r3, #1
 8001426:	d0dc      	beq.n	80013e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <__NVIC_SetPriorityGrouping>:
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800145c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_GetPriorityGrouping>:
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4906      	ldr	r1, [pc, #24]	; (80014cc <__NVIC_EnableIRQ+0x34>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ac:	f7ff ff90 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff2d 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff42 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff90 	bl	8001524 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5f 	bl	80014d0 <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff35 	bl	8001498 <__NVIC_EnableIRQ>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffa2 	bl	8001588 <SysTick_Config>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d008      	beq.n	8001678 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2204      	movs	r2, #4
 800166a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e020      	b.n	80016ba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 020e 	bic.w	r2, r2, #14
 8001686:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	2101      	movs	r1, #1
 80016a2:	fa01 f202 	lsl.w	r2, r1, r2
 80016a6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d005      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2204      	movs	r2, #4
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e0d6      	b.n	8001896 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 020e 	bic.w	r2, r2, #14
 80016f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b64      	ldr	r3, [pc, #400]	; (80018a0 <HAL_DMA_Abort_IT+0x1dc>)
 8001710:	429a      	cmp	r2, r3
 8001712:	d958      	bls.n	80017c6 <HAL_DMA_Abort_IT+0x102>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a62      	ldr	r2, [pc, #392]	; (80018a4 <HAL_DMA_Abort_IT+0x1e0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d04f      	beq.n	80017be <HAL_DMA_Abort_IT+0xfa>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a61      	ldr	r2, [pc, #388]	; (80018a8 <HAL_DMA_Abort_IT+0x1e4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d048      	beq.n	80017ba <HAL_DMA_Abort_IT+0xf6>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a5f      	ldr	r2, [pc, #380]	; (80018ac <HAL_DMA_Abort_IT+0x1e8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d040      	beq.n	80017b4 <HAL_DMA_Abort_IT+0xf0>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a5e      	ldr	r2, [pc, #376]	; (80018b0 <HAL_DMA_Abort_IT+0x1ec>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d038      	beq.n	80017ae <HAL_DMA_Abort_IT+0xea>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a5c      	ldr	r2, [pc, #368]	; (80018b4 <HAL_DMA_Abort_IT+0x1f0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d030      	beq.n	80017a8 <HAL_DMA_Abort_IT+0xe4>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5b      	ldr	r2, [pc, #364]	; (80018b8 <HAL_DMA_Abort_IT+0x1f4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d028      	beq.n	80017a2 <HAL_DMA_Abort_IT+0xde>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_DMA_Abort_IT+0x1dc>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d020      	beq.n	800179c <HAL_DMA_Abort_IT+0xd8>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a57      	ldr	r2, [pc, #348]	; (80018bc <HAL_DMA_Abort_IT+0x1f8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d019      	beq.n	8001798 <HAL_DMA_Abort_IT+0xd4>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a55      	ldr	r2, [pc, #340]	; (80018c0 <HAL_DMA_Abort_IT+0x1fc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d012      	beq.n	8001794 <HAL_DMA_Abort_IT+0xd0>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a54      	ldr	r2, [pc, #336]	; (80018c4 <HAL_DMA_Abort_IT+0x200>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00a      	beq.n	800178e <HAL_DMA_Abort_IT+0xca>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_DMA_Abort_IT+0x204>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d102      	bne.n	8001788 <HAL_DMA_Abort_IT+0xc4>
 8001782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001786:	e01b      	b.n	80017c0 <HAL_DMA_Abort_IT+0xfc>
 8001788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800178c:	e018      	b.n	80017c0 <HAL_DMA_Abort_IT+0xfc>
 800178e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001792:	e015      	b.n	80017c0 <HAL_DMA_Abort_IT+0xfc>
 8001794:	2310      	movs	r3, #16
 8001796:	e013      	b.n	80017c0 <HAL_DMA_Abort_IT+0xfc>
 8001798:	2301      	movs	r3, #1
 800179a:	e011      	b.n	80017c0 <HAL_DMA_Abort_IT+0xfc>
 800179c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a0:	e00e      	b.n	80017c0 <HAL_DMA_Abort_IT+0xfc>
 80017a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017a6:	e00b      	b.n	80017c0 <HAL_DMA_Abort_IT+0xfc>
 80017a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ac:	e008      	b.n	80017c0 <HAL_DMA_Abort_IT+0xfc>
 80017ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b2:	e005      	b.n	80017c0 <HAL_DMA_Abort_IT+0xfc>
 80017b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b8:	e002      	b.n	80017c0 <HAL_DMA_Abort_IT+0xfc>
 80017ba:	2310      	movs	r3, #16
 80017bc:	e000      	b.n	80017c0 <HAL_DMA_Abort_IT+0xfc>
 80017be:	2301      	movs	r3, #1
 80017c0:	4a42      	ldr	r2, [pc, #264]	; (80018cc <HAL_DMA_Abort_IT+0x208>)
 80017c2:	6053      	str	r3, [r2, #4]
 80017c4:	e057      	b.n	8001876 <HAL_DMA_Abort_IT+0x1b2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a36      	ldr	r2, [pc, #216]	; (80018a4 <HAL_DMA_Abort_IT+0x1e0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d04f      	beq.n	8001870 <HAL_DMA_Abort_IT+0x1ac>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a34      	ldr	r2, [pc, #208]	; (80018a8 <HAL_DMA_Abort_IT+0x1e4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d048      	beq.n	800186c <HAL_DMA_Abort_IT+0x1a8>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a33      	ldr	r2, [pc, #204]	; (80018ac <HAL_DMA_Abort_IT+0x1e8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d040      	beq.n	8001866 <HAL_DMA_Abort_IT+0x1a2>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a31      	ldr	r2, [pc, #196]	; (80018b0 <HAL_DMA_Abort_IT+0x1ec>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d038      	beq.n	8001860 <HAL_DMA_Abort_IT+0x19c>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a30      	ldr	r2, [pc, #192]	; (80018b4 <HAL_DMA_Abort_IT+0x1f0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d030      	beq.n	800185a <HAL_DMA_Abort_IT+0x196>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <HAL_DMA_Abort_IT+0x1f4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d028      	beq.n	8001854 <HAL_DMA_Abort_IT+0x190>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <HAL_DMA_Abort_IT+0x1dc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d020      	beq.n	800184e <HAL_DMA_Abort_IT+0x18a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a2a      	ldr	r2, [pc, #168]	; (80018bc <HAL_DMA_Abort_IT+0x1f8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d019      	beq.n	800184a <HAL_DMA_Abort_IT+0x186>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a29      	ldr	r2, [pc, #164]	; (80018c0 <HAL_DMA_Abort_IT+0x1fc>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d012      	beq.n	8001846 <HAL_DMA_Abort_IT+0x182>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <HAL_DMA_Abort_IT+0x200>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00a      	beq.n	8001840 <HAL_DMA_Abort_IT+0x17c>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_DMA_Abort_IT+0x204>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d102      	bne.n	800183a <HAL_DMA_Abort_IT+0x176>
 8001834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001838:	e01b      	b.n	8001872 <HAL_DMA_Abort_IT+0x1ae>
 800183a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800183e:	e018      	b.n	8001872 <HAL_DMA_Abort_IT+0x1ae>
 8001840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001844:	e015      	b.n	8001872 <HAL_DMA_Abort_IT+0x1ae>
 8001846:	2310      	movs	r3, #16
 8001848:	e013      	b.n	8001872 <HAL_DMA_Abort_IT+0x1ae>
 800184a:	2301      	movs	r3, #1
 800184c:	e011      	b.n	8001872 <HAL_DMA_Abort_IT+0x1ae>
 800184e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001852:	e00e      	b.n	8001872 <HAL_DMA_Abort_IT+0x1ae>
 8001854:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001858:	e00b      	b.n	8001872 <HAL_DMA_Abort_IT+0x1ae>
 800185a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185e:	e008      	b.n	8001872 <HAL_DMA_Abort_IT+0x1ae>
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	e005      	b.n	8001872 <HAL_DMA_Abort_IT+0x1ae>
 8001866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186a:	e002      	b.n	8001872 <HAL_DMA_Abort_IT+0x1ae>
 800186c:	2310      	movs	r3, #16
 800186e:	e000      	b.n	8001872 <HAL_DMA_Abort_IT+0x1ae>
 8001870:	2301      	movs	r3, #1
 8001872:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <HAL_DMA_Abort_IT+0x20c>)
 8001874:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3
    } 
  }
  return status;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40020080 	.word	0x40020080
 80018a4:	40020008 	.word	0x40020008
 80018a8:	4002001c 	.word	0x4002001c
 80018ac:	40020030 	.word	0x40020030
 80018b0:	40020044 	.word	0x40020044
 80018b4:	40020058 	.word	0x40020058
 80018b8:	4002006c 	.word	0x4002006c
 80018bc:	40020408 	.word	0x40020408
 80018c0:	4002041c 	.word	0x4002041c
 80018c4:	40020430 	.word	0x40020430
 80018c8:	40020444 	.word	0x40020444
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020000 	.word	0x40020000

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b08b      	sub	sp, #44	; 0x2c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e6:	e179      	b.n	8001bdc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e8:	2201      	movs	r2, #1
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	429a      	cmp	r2, r3
 8001902:	f040 8168 	bne.w	8001bd6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4a96      	ldr	r2, [pc, #600]	; (8001b64 <HAL_GPIO_Init+0x290>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d05e      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001910:	4a94      	ldr	r2, [pc, #592]	; (8001b64 <HAL_GPIO_Init+0x290>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d875      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 8001916:	4a94      	ldr	r2, [pc, #592]	; (8001b68 <HAL_GPIO_Init+0x294>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d058      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 800191c:	4a92      	ldr	r2, [pc, #584]	; (8001b68 <HAL_GPIO_Init+0x294>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d86f      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 8001922:	4a92      	ldr	r2, [pc, #584]	; (8001b6c <HAL_GPIO_Init+0x298>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d052      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001928:	4a90      	ldr	r2, [pc, #576]	; (8001b6c <HAL_GPIO_Init+0x298>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d869      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 800192e:	4a90      	ldr	r2, [pc, #576]	; (8001b70 <HAL_GPIO_Init+0x29c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04c      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001934:	4a8e      	ldr	r2, [pc, #568]	; (8001b70 <HAL_GPIO_Init+0x29c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d863      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 800193a:	4a8e      	ldr	r2, [pc, #568]	; (8001b74 <HAL_GPIO_Init+0x2a0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d046      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
 8001940:	4a8c      	ldr	r2, [pc, #560]	; (8001b74 <HAL_GPIO_Init+0x2a0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d85d      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 8001946:	2b12      	cmp	r3, #18
 8001948:	d82a      	bhi.n	80019a0 <HAL_GPIO_Init+0xcc>
 800194a:	2b12      	cmp	r3, #18
 800194c:	d859      	bhi.n	8001a02 <HAL_GPIO_Init+0x12e>
 800194e:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <HAL_GPIO_Init+0x80>)
 8001950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001954:	080019cf 	.word	0x080019cf
 8001958:	080019a9 	.word	0x080019a9
 800195c:	080019bb 	.word	0x080019bb
 8001960:	080019fd 	.word	0x080019fd
 8001964:	08001a03 	.word	0x08001a03
 8001968:	08001a03 	.word	0x08001a03
 800196c:	08001a03 	.word	0x08001a03
 8001970:	08001a03 	.word	0x08001a03
 8001974:	08001a03 	.word	0x08001a03
 8001978:	08001a03 	.word	0x08001a03
 800197c:	08001a03 	.word	0x08001a03
 8001980:	08001a03 	.word	0x08001a03
 8001984:	08001a03 	.word	0x08001a03
 8001988:	08001a03 	.word	0x08001a03
 800198c:	08001a03 	.word	0x08001a03
 8001990:	08001a03 	.word	0x08001a03
 8001994:	08001a03 	.word	0x08001a03
 8001998:	080019b1 	.word	0x080019b1
 800199c:	080019c5 	.word	0x080019c5
 80019a0:	4a75      	ldr	r2, [pc, #468]	; (8001b78 <HAL_GPIO_Init+0x2a4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019a6:	e02c      	b.n	8001a02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	623b      	str	r3, [r7, #32]
          break;
 80019ae:	e029      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	3304      	adds	r3, #4
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e024      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	3308      	adds	r3, #8
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e01f      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	330c      	adds	r3, #12
 80019ca:	623b      	str	r3, [r7, #32]
          break;
 80019cc:	e01a      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019d6:	2304      	movs	r3, #4
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e013      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e4:	2308      	movs	r3, #8
 80019e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	611a      	str	r2, [r3, #16]
          break;
 80019ee:	e009      	b.n	8001a04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f0:	2308      	movs	r3, #8
 80019f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	615a      	str	r2, [r3, #20]
          break;
 80019fa:	e003      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
          break;
 8001a00:	e000      	b.n	8001a04 <HAL_GPIO_Init+0x130>
          break;
 8001a02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2bff      	cmp	r3, #255	; 0xff
 8001a08:	d801      	bhi.n	8001a0e <HAL_GPIO_Init+0x13a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	e001      	b.n	8001a12 <HAL_GPIO_Init+0x13e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3304      	adds	r3, #4
 8001a12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2bff      	cmp	r3, #255	; 0xff
 8001a18:	d802      	bhi.n	8001a20 <HAL_GPIO_Init+0x14c>
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x152>
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	3b08      	subs	r3, #8
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	401a      	ands	r2, r3
 8001a38:	6a39      	ldr	r1, [r7, #32]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	431a      	orrs	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 80c1 	beq.w	8001bd6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a54:	4b49      	ldr	r3, [pc, #292]	; (8001b7c <HAL_GPIO_Init+0x2a8>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a48      	ldr	r2, [pc, #288]	; (8001b7c <HAL_GPIO_Init+0x2a8>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_GPIO_Init+0x2a8>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a6c:	4a44      	ldr	r2, [pc, #272]	; (8001b80 <HAL_GPIO_Init+0x2ac>)
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a3c      	ldr	r2, [pc, #240]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d01f      	beq.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a3b      	ldr	r2, [pc, #236]	; (8001b88 <HAL_GPIO_Init+0x2b4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d019      	beq.n	8001ad4 <HAL_GPIO_Init+0x200>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a3a      	ldr	r2, [pc, #232]	; (8001b8c <HAL_GPIO_Init+0x2b8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d013      	beq.n	8001ad0 <HAL_GPIO_Init+0x1fc>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a39      	ldr	r2, [pc, #228]	; (8001b90 <HAL_GPIO_Init+0x2bc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00d      	beq.n	8001acc <HAL_GPIO_Init+0x1f8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a38      	ldr	r2, [pc, #224]	; (8001b94 <HAL_GPIO_Init+0x2c0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d007      	beq.n	8001ac8 <HAL_GPIO_Init+0x1f4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a37      	ldr	r2, [pc, #220]	; (8001b98 <HAL_GPIO_Init+0x2c4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_GPIO_Init+0x1f0>
 8001ac0:	2305      	movs	r3, #5
 8001ac2:	e00a      	b.n	8001ada <HAL_GPIO_Init+0x206>
 8001ac4:	2306      	movs	r3, #6
 8001ac6:	e008      	b.n	8001ada <HAL_GPIO_Init+0x206>
 8001ac8:	2304      	movs	r3, #4
 8001aca:	e006      	b.n	8001ada <HAL_GPIO_Init+0x206>
 8001acc:	2303      	movs	r3, #3
 8001ace:	e004      	b.n	8001ada <HAL_GPIO_Init+0x206>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e002      	b.n	8001ada <HAL_GPIO_Init+0x206>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_GPIO_Init+0x206>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001adc:	f002 0203 	and.w	r2, r2, #3
 8001ae0:	0092      	lsls	r2, r2, #2
 8001ae2:	4093      	lsls	r3, r2
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aea:	4925      	ldr	r1, [pc, #148]	; (8001b80 <HAL_GPIO_Init+0x2ac>)
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	4924      	ldr	r1, [pc, #144]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4920      	ldr	r1, [pc, #128]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	491a      	ldr	r1, [pc, #104]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
 8001b38:	e006      	b.n	8001b48 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4916      	ldr	r1, [pc, #88]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d025      	beq.n	8001ba0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4910      	ldr	r1, [pc, #64]	; (8001b9c <HAL_GPIO_Init+0x2c8>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
 8001b60:	e025      	b.n	8001bae <HAL_GPIO_Init+0x2da>
 8001b62:	bf00      	nop
 8001b64:	10320000 	.word	0x10320000
 8001b68:	10310000 	.word	0x10310000
 8001b6c:	10220000 	.word	0x10220000
 8001b70:	10210000 	.word	0x10210000
 8001b74:	10120000 	.word	0x10120000
 8001b78:	10110000 	.word	0x10110000
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000
 8001b84:	40010800 	.word	0x40010800
 8001b88:	40010c00 	.word	0x40010c00
 8001b8c:	40011000 	.word	0x40011000
 8001b90:	40011400 	.word	0x40011400
 8001b94:	40011800 	.word	0x40011800
 8001b98:	40011c00 	.word	0x40011c00
 8001b9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_GPIO_Init+0x324>)
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	4913      	ldr	r1, [pc, #76]	; (8001bf8 <HAL_GPIO_Init+0x324>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_GPIO_Init+0x324>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_GPIO_Init+0x324>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
 8001bc6:	e006      	b.n	8001bd6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_GPIO_Init+0x324>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	4909      	ldr	r1, [pc, #36]	; (8001bf8 <HAL_GPIO_Init+0x324>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	3301      	adds	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f47f ae7e 	bne.w	80018e8 <HAL_GPIO_Init+0x14>
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	372c      	adds	r7, #44	; 0x2c
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e001      	b.n	8001c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	807b      	strh	r3, [r7, #2]
 8001c36:	4613      	mov	r3, r2
 8001c38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3a:	787b      	ldrb	r3, [r7, #1]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c40:	887a      	ldrh	r2, [r7, #2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c46:	e003      	b.n	8001c50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	041a      	lsls	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e036      	b.n	8001cda <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001c74:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f245 5255 	movw	r2, #21845	; 0x5555
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6852      	ldr	r2, [r2, #4]
 8001c88:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6892      	ldr	r2, [r2, #8]
 8001c92:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001c94:	f7ff f97c 	bl	8000f90 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001c9a:	e011      	b.n	8001cc0 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001c9c:	f7ff f978 	bl	8000f90 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 323c 	movw	r2, #4924	; 0x133c
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d908      	bls.n	8001cc0 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e00c      	b.n	8001cda <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1e6      	bne.n	8001c9c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e272      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8087 	beq.w	8001e12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d04:	4b92      	ldr	r3, [pc, #584]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d00c      	beq.n	8001d2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d10:	4b8f      	ldr	r3, [pc, #572]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d112      	bne.n	8001d42 <HAL_RCC_OscConfig+0x5e>
 8001d1c:	4b8c      	ldr	r3, [pc, #560]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d28:	d10b      	bne.n	8001d42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2a:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d06c      	beq.n	8001e10 <HAL_RCC_OscConfig+0x12c>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d168      	bne.n	8001e10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e24c      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x76>
 8001d4c:	4b80      	ldr	r3, [pc, #512]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a7f      	ldr	r2, [pc, #508]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e02e      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x98>
 8001d62:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7a      	ldr	r2, [pc, #488]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a77      	ldr	r2, [pc, #476]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e01d      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0xbc>
 8001d86:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a71      	ldr	r2, [pc, #452]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b6f      	ldr	r3, [pc, #444]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a6e      	ldr	r2, [pc, #440]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xd4>
 8001da0:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a6a      	ldr	r2, [pc, #424]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b68      	ldr	r3, [pc, #416]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a67      	ldr	r2, [pc, #412]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f8e6 	bl	8000f90 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f8e2 	bl	8000f90 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e200      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b5d      	ldr	r3, [pc, #372]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xe4>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff f8d2 	bl	8000f90 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff f8ce 	bl	8000f90 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1ec      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x10c>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1e:	4b4c      	ldr	r3, [pc, #304]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x18c>
 8001e36:	4b46      	ldr	r3, [pc, #280]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x176>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1c0      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4939      	ldr	r1, [pc, #228]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e03a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f887 	bl	8000f90 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff f883 	bl	8000f90 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1a1      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4927      	ldr	r1, [pc, #156]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f866 	bl	8000f90 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f862 	bl	8000f90 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e180      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d03a      	beq.n	8001f68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d019      	beq.n	8001f2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f00:	f7ff f846 	bl	8000f90 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff f842 	bl	8000f90 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e160      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f26:	2001      	movs	r0, #1
 8001f28:	f000 face 	bl	80024c8 <RCC_Delay>
 8001f2c:	e01c      	b.n	8001f68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_RCC_OscConfig+0x274>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff f82c 	bl	8000f90 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3a:	e00f      	b.n	8001f5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff f828 	bl	8000f90 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d908      	bls.n	8001f5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e146      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000
 8001f54:	42420000 	.word	0x42420000
 8001f58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5c:	4b92      	ldr	r3, [pc, #584]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e9      	bne.n	8001f3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80a6 	beq.w	80020c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7a:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10d      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a87      	ldr	r2, [pc, #540]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	4b85      	ldr	r3, [pc, #532]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa2:	4b82      	ldr	r3, [pc, #520]	; (80021ac <HAL_RCC_OscConfig+0x4c8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d118      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fae:	4b7f      	ldr	r3, [pc, #508]	; (80021ac <HAL_RCC_OscConfig+0x4c8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a7e      	ldr	r2, [pc, #504]	; (80021ac <HAL_RCC_OscConfig+0x4c8>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fba:	f7fe ffe9 	bl	8000f90 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc2:	f7fe ffe5 	bl	8000f90 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	; 0x64
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e103      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	4b75      	ldr	r3, [pc, #468]	; (80021ac <HAL_RCC_OscConfig+0x4c8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x312>
 8001fe8:	4b6f      	ldr	r3, [pc, #444]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a6e      	ldr	r2, [pc, #440]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6213      	str	r3, [r2, #32]
 8001ff4:	e02d      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x334>
 8001ffe:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4a69      	ldr	r2, [pc, #420]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6213      	str	r3, [r2, #32]
 800200a:	4b67      	ldr	r3, [pc, #412]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a66      	ldr	r2, [pc, #408]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	6213      	str	r3, [r2, #32]
 8002016:	e01c      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d10c      	bne.n	800203a <HAL_RCC_OscConfig+0x356>
 8002020:	4b61      	ldr	r3, [pc, #388]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a60      	ldr	r2, [pc, #384]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6213      	str	r3, [r2, #32]
 800202c:	4b5e      	ldr	r3, [pc, #376]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a5d      	ldr	r2, [pc, #372]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6213      	str	r3, [r2, #32]
 8002038:	e00b      	b.n	8002052 <HAL_RCC_OscConfig+0x36e>
 800203a:	4b5b      	ldr	r3, [pc, #364]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	4a5a      	ldr	r2, [pc, #360]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
 8002046:	4b58      	ldr	r3, [pc, #352]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a57      	ldr	r2, [pc, #348]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d015      	beq.n	8002086 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7fe ff99 	bl	8000f90 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe ff95 	bl	8000f90 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0b1      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	4b4b      	ldr	r3, [pc, #300]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ee      	beq.n	8002062 <HAL_RCC_OscConfig+0x37e>
 8002084:	e014      	b.n	80020b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7fe ff83 	bl	8000f90 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	e00a      	b.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7fe ff7f 	bl	8000f90 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	; 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e09b      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ee      	bne.n	800208e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b0:	7dfb      	ldrb	r3, [r7, #23]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4b3c      	ldr	r3, [pc, #240]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a3b      	ldr	r2, [pc, #236]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8087 	beq.w	80021da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020cc:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d061      	beq.n	800219c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d146      	bne.n	800216e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7fe ff53 	bl	8000f90 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7fe ff4f 	bl	8000f90 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e06d      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002114:	d108      	bne.n	8002128 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4921      	ldr	r1, [pc, #132]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a19      	ldr	r1, [r3, #32]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	430b      	orrs	r3, r1
 800213a:	491b      	ldr	r1, [pc, #108]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_RCC_OscConfig+0x4cc>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7fe ff23 	bl	8000f90 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7fe ff1f 	bl	8000f90 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e03d      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x46a>
 800216c:	e035      	b.n	80021da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_RCC_OscConfig+0x4cc>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7fe ff0c 	bl	8000f90 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217c:	f7fe ff08 	bl	8000f90 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e026      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x498>
 800219a:	e01e      	b.n	80021da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e019      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40007000 	.word	0x40007000
 80021b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_OscConfig+0x500>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000

080021e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0d0      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d910      	bls.n	800222c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b67      	ldr	r3, [pc, #412]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 0207 	bic.w	r2, r3, #7
 8002212:	4965      	ldr	r1, [pc, #404]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b8      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800224e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a52      	ldr	r2, [pc, #328]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002266:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b50      	ldr	r3, [pc, #320]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	494d      	ldr	r1, [pc, #308]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d040      	beq.n	8002308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d115      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07f      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e073      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06b      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c6:	4b39      	ldr	r3, [pc, #228]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f023 0203 	bic.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4936      	ldr	r1, [pc, #216]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d8:	f7fe fe5a 	bl	8000f90 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7fe fe56 	bl	8000f90 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e053      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 020c 	and.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1eb      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d210      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 0207 	bic.w	r2, r3, #7
 800231e:	4922      	ldr	r1, [pc, #136]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e032      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	490e      	ldr	r1, [pc, #56]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002376:	f000 f821 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800237a:	4602      	mov	r2, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	490a      	ldr	r1, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	5ccb      	ldrb	r3, [r1, r3]
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fdb8 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08004340 	.word	0x08004340
 80023b4:	200001a0 	.word	0x200001a0
 80023b8:	200001a4 	.word	0x200001a4

080023bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <HAL_RCC_GetSysClockFreq+0x94>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d002      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x30>
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x36>
 80023ea:	e027      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ee:	613b      	str	r3, [r7, #16]
      break;
 80023f0:	e027      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	0c9b      	lsrs	r3, r3, #18
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	4a17      	ldr	r2, [pc, #92]	; (8002458 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023fc:	5cd3      	ldrb	r3, [r2, r3]
 80023fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d010      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_RCC_GetSysClockFreq+0x94>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	0c5b      	lsrs	r3, r3, #17
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_RCC_GetSysClockFreq+0x98>)
 800241e:	fb03 f202 	mul.w	r2, r3, r2
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	e004      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	613b      	str	r3, [r7, #16]
      break;
 800243a:	e002      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetSysClockFreq+0x98>)
 800243e:	613b      	str	r3, [r7, #16]
      break;
 8002440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002442:	693b      	ldr	r3, [r7, #16]
}
 8002444:	4618      	mov	r0, r3
 8002446:	371c      	adds	r7, #28
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	007a1200 	.word	0x007a1200
 8002458:	08004358 	.word	0x08004358
 800245c:	08004368 	.word	0x08004368
 8002460:	003d0900 	.word	0x003d0900

08002464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002468:	4b02      	ldr	r3, [pc, #8]	; (8002474 <HAL_RCC_GetHCLKFreq+0x10>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	200001a0 	.word	0x200001a0

08002478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800247c:	f7ff fff2 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4903      	ldr	r1, [pc, #12]	; (800249c <HAL_RCC_GetPCLK1Freq+0x24>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	08004350 	.word	0x08004350

080024a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024a4:	f7ff ffde 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	0adb      	lsrs	r3, r3, #11
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4903      	ldr	r1, [pc, #12]	; (80024c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08004350 	.word	0x08004350

080024c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <RCC_Delay+0x34>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <RCC_Delay+0x38>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0a5b      	lsrs	r3, r3, #9
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024e4:	bf00      	nop
  }
  while (Delay --);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	60fa      	str	r2, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f9      	bne.n	80024e4 <RCC_Delay+0x1c>
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	200001a0 	.word	0x200001a0
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d07d      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002524:	4b4f      	ldr	r3, [pc, #316]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10d      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	4b4c      	ldr	r3, [pc, #304]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4a4b      	ldr	r2, [pc, #300]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253a:	61d3      	str	r3, [r2, #28]
 800253c:	4b49      	ldr	r3, [pc, #292]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002548:	2301      	movs	r3, #1
 800254a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	4b46      	ldr	r3, [pc, #280]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d118      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002558:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a42      	ldr	r2, [pc, #264]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800255e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002562:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002564:	f7fe fd14 	bl	8000f90 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	e008      	b.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256c:	f7fe fd10 	bl	8000f90 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e06d      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800258a:	4b36      	ldr	r3, [pc, #216]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d02e      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d027      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025a8:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025b2:	4b2e      	ldr	r3, [pc, #184]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025b8:	4b2c      	ldr	r3, [pc, #176]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025be:	4a29      	ldr	r2, [pc, #164]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d014      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe fcdf 	bl	8000f90 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe fcdb 	bl	8000f90 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e036      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ee      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4917      	ldr	r1, [pc, #92]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002606:	4313      	orrs	r3, r2
 8002608:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800260a:	7dfb      	ldrb	r3, [r7, #23]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d105      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	4a13      	ldr	r2, [pc, #76]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002628:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	490b      	ldr	r1, [pc, #44]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	40007000 	.word	0x40007000
 800266c:	42420440 	.word	0x42420440

08002670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e041      	b.n	8002706 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe fb0a 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3304      	adds	r3, #4
 80026ac:	4619      	mov	r1, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	f000 f9a2 	bl	80029f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d001      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e044      	b.n	80027b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_TIM_Base_Start_IT+0xac>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d018      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x6c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d013      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x6c>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d00e      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x6c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d009      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x6c>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <HAL_TIM_Base_Start_IT+0xb8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d004      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x6c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a15      	ldr	r2, [pc, #84]	; (80027cc <HAL_TIM_Base_Start_IT+0xbc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d111      	bne.n	80027a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b06      	cmp	r3, #6
 800278c:	d010      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279e:	e007      	b.n	80027b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40013400 	.word	0x40013400
 80027c4:	40000400 	.word	0x40000400
 80027c8:	40000800 	.word	0x40000800
 80027cc:	40000c00 	.word	0x40000c00

080027d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d020      	beq.n	8002834 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01b      	beq.n	8002834 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0202 	mvn.w	r2, #2
 8002804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f8d1 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f8c4 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f8d3 	bl	80029d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	d020      	beq.n	8002880 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01b      	beq.n	8002880 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0204 	mvn.w	r2, #4
 8002850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f8ab 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 800286c:	e005      	b.n	800287a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f89e 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f8ad 	bl	80029d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d020      	beq.n	80028cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01b      	beq.n	80028cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0208 	mvn.w	r2, #8
 800289c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2204      	movs	r2, #4
 80028a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f885 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 80028b8:	e005      	b.n	80028c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f878 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f887 	bl	80029d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d020      	beq.n	8002918 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01b      	beq.n	8002918 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0210 	mvn.w	r2, #16
 80028e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2208      	movs	r2, #8
 80028ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f85f 	bl	80029c2 <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f852 	bl	80029b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f861 	bl	80029d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00c      	beq.n	800293c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0201 	mvn.w	r2, #1
 8002934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fd fd50 	bl	80003dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00c      	beq.n	8002960 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f947 	bl	8002bee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800297c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f831 	bl	80029e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00c      	beq.n	80029a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0220 	mvn.w	r2, #32
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f91a 	bl	8002bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a39      	ldr	r2, [pc, #228]	; (8002af0 <TIM_Base_SetConfig+0xf8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <TIM_Base_SetConfig+0x40>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a38      	ldr	r2, [pc, #224]	; (8002af4 <TIM_Base_SetConfig+0xfc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00f      	beq.n	8002a38 <TIM_Base_SetConfig+0x40>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d00b      	beq.n	8002a38 <TIM_Base_SetConfig+0x40>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a35      	ldr	r2, [pc, #212]	; (8002af8 <TIM_Base_SetConfig+0x100>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <TIM_Base_SetConfig+0x40>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a34      	ldr	r2, [pc, #208]	; (8002afc <TIM_Base_SetConfig+0x104>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <TIM_Base_SetConfig+0x40>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a33      	ldr	r2, [pc, #204]	; (8002b00 <TIM_Base_SetConfig+0x108>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d108      	bne.n	8002a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a28      	ldr	r2, [pc, #160]	; (8002af0 <TIM_Base_SetConfig+0xf8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <TIM_Base_SetConfig+0x82>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a27      	ldr	r2, [pc, #156]	; (8002af4 <TIM_Base_SetConfig+0xfc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00f      	beq.n	8002a7a <TIM_Base_SetConfig+0x82>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d00b      	beq.n	8002a7a <TIM_Base_SetConfig+0x82>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <TIM_Base_SetConfig+0x100>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <TIM_Base_SetConfig+0x82>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a23      	ldr	r2, [pc, #140]	; (8002afc <TIM_Base_SetConfig+0x104>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d003      	beq.n	8002a7a <TIM_Base_SetConfig+0x82>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a22      	ldr	r2, [pc, #136]	; (8002b00 <TIM_Base_SetConfig+0x108>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d108      	bne.n	8002a8c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <TIM_Base_SetConfig+0xf8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0xc8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <TIM_Base_SetConfig+0xfc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d103      	bne.n	8002ac8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f023 0201 	bic.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	611a      	str	r2, [r3, #16]
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40013400 	.word	0x40013400
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800
 8002b00:	40000c00 	.word	0x40000c00

08002b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e050      	b.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d018      	beq.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b72:	d00e      	beq.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d004      	beq.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d10c      	bne.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	40013400 	.word	0x40013400
 8002bd0:	40000400 	.word	0x40000400
 8002bd4:	40000800 	.word	0x40000800
 8002bd8:	40000c00 	.word	0x40000c00

08002bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e042      	b.n	8002c98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe f868 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2224      	movs	r2, #36	; 0x24
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fdb7 	bl	80037b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d175      	bne.n	8002dac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_UART_Transmit+0x2c>
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e06e      	b.n	8002dae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2221      	movs	r2, #33	; 0x21
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cde:	f7fe f957 	bl	8000f90 <HAL_GetTick>
 8002ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf8:	d108      	bne.n	8002d0c <HAL_UART_Transmit+0x6c>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d104      	bne.n	8002d0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	e003      	b.n	8002d14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d14:	e02e      	b.n	8002d74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fb1c 	bl	800335e <UART_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e03a      	b.n	8002dae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	3302      	adds	r3, #2
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	e007      	b.n	8002d66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	3301      	adds	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1cb      	bne.n	8002d16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2140      	movs	r1, #64	; 0x40
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fae8 	bl	800335e <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e006      	b.n	8002dae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d112      	bne.n	8002df6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_UART_Receive_IT+0x26>
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e00b      	b.n	8002df8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	461a      	mov	r2, r3
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fb0f 	bl	8003410 <UART_Start_Receive_IT>
 8002df2:	4603      	mov	r3, r0
 8002df4:	e000      	b.n	8002df8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b0ba      	sub	sp, #232	; 0xe8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_UART_IRQHandler+0x66>
 8002e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fbec 	bl	800363c <UART_Receive_IT>
      return;
 8002e64:	e25b      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80de 	beq.w	800302c <HAL_UART_IRQHandler+0x22c>
 8002e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d106      	bne.n	8002e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80d1 	beq.w	800302c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_UART_IRQHandler+0xae>
 8002e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xd2>
 8002eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f043 0202 	orr.w	r2, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xf6>
 8002ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d011      	beq.n	8002f26 <HAL_UART_IRQHandler+0x126>
 8002f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f043 0208 	orr.w	r2, r3, #8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 81f2 	beq.w	8003314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_UART_IRQHandler+0x14e>
 8002f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fb77 	bl	800363c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_UART_IRQHandler+0x17a>
 8002f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04f      	beq.n	800301a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa81 	bl	8003482 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d041      	beq.n	8003012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3314      	adds	r3, #20
 8002f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3314      	adds	r3, #20
 8002fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1d9      	bne.n	8002f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d013      	beq.n	800300a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	4a7e      	ldr	r2, [pc, #504]	; (80031e0 <HAL_UART_IRQHandler+0x3e0>)
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fb68 	bl	80016c4 <HAL_DMA_Abort_IT>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003004:	4610      	mov	r0, r2
 8003006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	e00e      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f993 	bl	8003336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	e00a      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f98f 	bl	8003336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003018:	e006      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f98b 	bl	8003336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003026:	e175      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003028:	bf00      	nop
    return;
 800302a:	e173      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 814f 	bne.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8148 	beq.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8141 	beq.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80b6 	beq.w	80031e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8145 	beq.w	8003318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003096:	429a      	cmp	r2, r3
 8003098:	f080 813e 	bcs.w	8003318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	f000 8088 	beq.w	80031c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	330c      	adds	r3, #12
 80030b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030be:	e853 3f00 	ldrex	r3, [r3]
 80030c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	330c      	adds	r3, #12
 80030d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030dc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030ec:	e841 2300 	strex	r3, r2, [r1]
 80030f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1d9      	bne.n	80030b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3314      	adds	r3, #20
 8003102:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003106:	e853 3f00 	ldrex	r3, [r3]
 800310a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800310c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3314      	adds	r3, #20
 800311c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003120:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003124:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003128:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800312c:	e841 2300 	strex	r3, r2, [r1]
 8003130:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e1      	bne.n	80030fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3314      	adds	r3, #20
 800313e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003142:	e853 3f00 	ldrex	r3, [r3]
 8003146:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3314      	adds	r3, #20
 8003158:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800315c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800315e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003162:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800316a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e3      	bne.n	8003138 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	330c      	adds	r3, #12
 8003184:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800318e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003190:	f023 0310 	bic.w	r3, r3, #16
 8003194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	330c      	adds	r3, #12
 800319e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80031a4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e3      	bne.n	800317e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fa47 	bl	800164e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f8b6 	bl	8003348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031dc:	e09c      	b.n	8003318 <HAL_UART_IRQHandler+0x518>
 80031de:	bf00      	nop
 80031e0:	08003547 	.word	0x08003547
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 808e 	beq.w	800331c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8089 	beq.w	800331c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
 8003210:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800321a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800322e:	647a      	str	r2, [r7, #68]	; 0x44
 8003230:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800323c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e3      	bne.n	800320a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3314      	adds	r3, #20
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	623b      	str	r3, [r7, #32]
   return(result);
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003266:	633a      	str	r2, [r7, #48]	; 0x30
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800326c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e3      	bne.n	8003242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	60fb      	str	r3, [r7, #12]
   return(result);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0310 	bic.w	r3, r3, #16
 800329e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032ac:	61fa      	str	r2, [r7, #28]
 80032ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	69b9      	ldr	r1, [r7, #24]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	617b      	str	r3, [r7, #20]
   return(result);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e3      	bne.n	8003288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f83b 	bl	8003348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032d2:	e023      	b.n	800331c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <HAL_UART_IRQHandler+0x4f4>
 80032e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f93e 	bl	800356e <UART_Transmit_IT>
    return;
 80032f2:	e014      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <HAL_UART_IRQHandler+0x51e>
 8003300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f97d 	bl	800360c <UART_EndTransmit_IT>
    return;
 8003312:	e004      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
    return;
 8003314:	bf00      	nop
 8003316:	e002      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
      return;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
      return;
 800331c:	bf00      	nop
  }
}
 800331e:	37e8      	adds	r7, #232	; 0xe8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336e:	e03b      	b.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003376:	d037      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003378:	f7fd fe0a 	bl	8000f90 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	6a3a      	ldr	r2, [r7, #32]
 8003384:	429a      	cmp	r2, r3
 8003386:	d302      	bcc.n	800338e <UART_WaitOnFlagUntilTimeout+0x30>
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e03a      	b.n	8003408 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d023      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b80      	cmp	r3, #128	; 0x80
 80033a4:	d020      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d01d      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d116      	bne.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f856 	bl	8003482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2208      	movs	r2, #8
 80033da:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e00f      	b.n	8003408 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4013      	ands	r3, r2
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	429a      	cmp	r2, r3
 8003404:	d0b4      	beq.n	8003370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2222      	movs	r2, #34	; 0x22
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003454:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0220 	orr.w	r2, r2, #32
 8003474:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003482:	b480      	push	{r7}
 8003484:	b095      	sub	sp, #84	; 0x54
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	330c      	adds	r3, #12
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	e853 3f00 	ldrex	r3, [r3]
 8003498:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	330c      	adds	r3, #12
 80034a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034aa:	643a      	str	r2, [r7, #64]	; 0x40
 80034ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e5      	bne.n	800348a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3314      	adds	r3, #20
 80034c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3314      	adds	r3, #20
 80034dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e5      	bne.n	80034be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d119      	bne.n	800352e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	330c      	adds	r3, #12
 8003500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	60bb      	str	r3, [r7, #8]
   return(result);
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f023 0310 	bic.w	r3, r3, #16
 8003510:	647b      	str	r3, [r7, #68]	; 0x44
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	330c      	adds	r3, #12
 8003518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800351a:	61ba      	str	r2, [r7, #24]
 800351c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6979      	ldr	r1, [r7, #20]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	613b      	str	r3, [r7, #16]
   return(result);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e5      	bne.n	80034fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800353c:	bf00      	nop
 800353e:	3754      	adds	r7, #84	; 0x54
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr

08003546 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff fee8 	bl	8003336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b21      	cmp	r3, #33	; 0x21
 8003580:	d13e      	bne.n	8003600 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800358a:	d114      	bne.n	80035b6 <UART_Transmit_IT+0x48>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d110      	bne.n	80035b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	1c9a      	adds	r2, r3, #2
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	621a      	str	r2, [r3, #32]
 80035b4:	e008      	b.n	80035c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	1c59      	adds	r1, r3, #1
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6211      	str	r1, [r2, #32]
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4619      	mov	r1, r3
 80035d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10f      	bne.n	80035fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003622:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fe79 	bl	8003324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08c      	sub	sp, #48	; 0x30
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b22      	cmp	r3, #34	; 0x22
 800364e:	f040 80ae 	bne.w	80037ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365a:	d117      	bne.n	800368c <UART_Receive_IT+0x50>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d113      	bne.n	800368c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	b29b      	uxth	r3, r3
 8003676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367a:	b29a      	uxth	r2, r3
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	1c9a      	adds	r2, r3, #2
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	629a      	str	r2, [r3, #40]	; 0x28
 800368a:	e026      	b.n	80036da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369e:	d007      	beq.n	80036b0 <UART_Receive_IT+0x74>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <UART_Receive_IT+0x82>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	e008      	b.n	80036d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	4619      	mov	r1, r3
 80036e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d15d      	bne.n	80037aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0220 	bic.w	r2, r2, #32
 80036fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800370c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	2b01      	cmp	r3, #1
 8003732:	d135      	bne.n	80037a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	330c      	adds	r3, #12
 8003740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	613b      	str	r3, [r7, #16]
   return(result);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f023 0310 	bic.w	r3, r3, #16
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375a:	623a      	str	r2, [r7, #32]
 800375c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	69f9      	ldr	r1, [r7, #28]
 8003760:	6a3a      	ldr	r2, [r7, #32]
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	61bb      	str	r3, [r7, #24]
   return(result);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e5      	bne.n	800373a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d10a      	bne.n	8003792 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fdd5 	bl	8003348 <HAL_UARTEx_RxEventCallback>
 800379e:	e002      	b.n	80037a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7fc fd5d 	bl	8000260 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e002      	b.n	80037b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3730      	adds	r7, #48	; 0x30
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037f2:	f023 030c 	bic.w	r3, r3, #12
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a2c      	ldr	r2, [pc, #176]	; (80038cc <UART_SetConfig+0x114>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d103      	bne.n	8003828 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003820:	f7fe fe3e 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	e002      	b.n	800382e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7fe fe26 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 800382c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009a      	lsls	r2, r3, #2
 8003838:	441a      	add	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <UART_SetConfig+0x118>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	0119      	lsls	r1, r3, #4
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009a      	lsls	r2, r3, #2
 8003858:	441a      	add	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	fbb2 f2f3 	udiv	r2, r2, r3
 8003864:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <UART_SetConfig+0x118>)
 8003866:	fba3 0302 	umull	r0, r3, r3, r2
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2064      	movs	r0, #100	; 0x64
 800386e:	fb00 f303 	mul.w	r3, r0, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	3332      	adds	r3, #50	; 0x32
 8003878:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <UART_SetConfig+0x118>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003884:	4419      	add	r1, r3
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009a      	lsls	r2, r3, #2
 8003890:	441a      	add	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	fbb2 f2f3 	udiv	r2, r2, r3
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <UART_SetConfig+0x118>)
 800389e:	fba3 0302 	umull	r0, r3, r3, r2
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2064      	movs	r0, #100	; 0x64
 80038a6:	fb00 f303 	mul.w	r3, r0, r3
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	3332      	adds	r3, #50	; 0x32
 80038b0:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <UART_SetConfig+0x118>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	f003 020f 	and.w	r2, r3, #15
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	440a      	add	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40013800 	.word	0x40013800
 80038d0:	51eb851f 	.word	0x51eb851f

080038d4 <siprintf>:
 80038d4:	b40e      	push	{r1, r2, r3}
 80038d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038da:	b500      	push	{lr}
 80038dc:	b09c      	sub	sp, #112	; 0x70
 80038de:	ab1d      	add	r3, sp, #116	; 0x74
 80038e0:	9002      	str	r0, [sp, #8]
 80038e2:	9006      	str	r0, [sp, #24]
 80038e4:	9107      	str	r1, [sp, #28]
 80038e6:	9104      	str	r1, [sp, #16]
 80038e8:	4808      	ldr	r0, [pc, #32]	; (800390c <siprintf+0x38>)
 80038ea:	4909      	ldr	r1, [pc, #36]	; (8003910 <siprintf+0x3c>)
 80038ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80038f0:	9105      	str	r1, [sp, #20]
 80038f2:	6800      	ldr	r0, [r0, #0]
 80038f4:	a902      	add	r1, sp, #8
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	f000 f9b2 	bl	8003c60 <_svfiprintf_r>
 80038fc:	2200      	movs	r2, #0
 80038fe:	9b02      	ldr	r3, [sp, #8]
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	b01c      	add	sp, #112	; 0x70
 8003904:	f85d eb04 	ldr.w	lr, [sp], #4
 8003908:	b003      	add	sp, #12
 800390a:	4770      	bx	lr
 800390c:	200001f8 	.word	0x200001f8
 8003910:	ffff0208 	.word	0xffff0208

08003914 <memset>:
 8003914:	4603      	mov	r3, r0
 8003916:	4402      	add	r2, r0
 8003918:	4293      	cmp	r3, r2
 800391a:	d100      	bne.n	800391e <memset+0xa>
 800391c:	4770      	bx	lr
 800391e:	f803 1b01 	strb.w	r1, [r3], #1
 8003922:	e7f9      	b.n	8003918 <memset+0x4>

08003924 <strstr>:
 8003924:	780a      	ldrb	r2, [r1, #0]
 8003926:	b570      	push	{r4, r5, r6, lr}
 8003928:	b96a      	cbnz	r2, 8003946 <strstr+0x22>
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	429a      	cmp	r2, r3
 800392e:	d109      	bne.n	8003944 <strstr+0x20>
 8003930:	460c      	mov	r4, r1
 8003932:	4605      	mov	r5, r0
 8003934:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f6      	beq.n	800392a <strstr+0x6>
 800393c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003940:	429e      	cmp	r6, r3
 8003942:	d0f7      	beq.n	8003934 <strstr+0x10>
 8003944:	3001      	adds	r0, #1
 8003946:	7803      	ldrb	r3, [r0, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1ef      	bne.n	800392c <strstr+0x8>
 800394c:	4618      	mov	r0, r3
 800394e:	e7ec      	b.n	800392a <strstr+0x6>

08003950 <__errno>:
 8003950:	4b01      	ldr	r3, [pc, #4]	; (8003958 <__errno+0x8>)
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	200001f8 	.word	0x200001f8

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	2600      	movs	r6, #0
 8003960:	4d0c      	ldr	r5, [pc, #48]	; (8003994 <__libc_init_array+0x38>)
 8003962:	4c0d      	ldr	r4, [pc, #52]	; (8003998 <__libc_init_array+0x3c>)
 8003964:	1b64      	subs	r4, r4, r5
 8003966:	10a4      	asrs	r4, r4, #2
 8003968:	42a6      	cmp	r6, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	f000 fc7a 	bl	8004264 <_init>
 8003970:	2600      	movs	r6, #0
 8003972:	4d0a      	ldr	r5, [pc, #40]	; (800399c <__libc_init_array+0x40>)
 8003974:	4c0a      	ldr	r4, [pc, #40]	; (80039a0 <__libc_init_array+0x44>)
 8003976:	1b64      	subs	r4, r4, r5
 8003978:	10a4      	asrs	r4, r4, #2
 800397a:	42a6      	cmp	r6, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	f855 3b04 	ldr.w	r3, [r5], #4
 8003984:	4798      	blx	r3
 8003986:	3601      	adds	r6, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	f855 3b04 	ldr.w	r3, [r5], #4
 800398e:	4798      	blx	r3
 8003990:	3601      	adds	r6, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	080043a0 	.word	0x080043a0
 8003998:	080043a0 	.word	0x080043a0
 800399c:	080043a0 	.word	0x080043a0
 80039a0:	080043a4 	.word	0x080043a4

080039a4 <__retarget_lock_acquire_recursive>:
 80039a4:	4770      	bx	lr

080039a6 <__retarget_lock_release_recursive>:
 80039a6:	4770      	bx	lr

080039a8 <memcpy>:
 80039a8:	440a      	add	r2, r1
 80039aa:	4291      	cmp	r1, r2
 80039ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80039b0:	d100      	bne.n	80039b4 <memcpy+0xc>
 80039b2:	4770      	bx	lr
 80039b4:	b510      	push	{r4, lr}
 80039b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039ba:	4291      	cmp	r1, r2
 80039bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039c0:	d1f9      	bne.n	80039b6 <memcpy+0xe>
 80039c2:	bd10      	pop	{r4, pc}

080039c4 <_free_r>:
 80039c4:	b538      	push	{r3, r4, r5, lr}
 80039c6:	4605      	mov	r5, r0
 80039c8:	2900      	cmp	r1, #0
 80039ca:	d040      	beq.n	8003a4e <_free_r+0x8a>
 80039cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039d0:	1f0c      	subs	r4, r1, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bfb8      	it	lt
 80039d6:	18e4      	addlt	r4, r4, r3
 80039d8:	f000 f8dc 	bl	8003b94 <__malloc_lock>
 80039dc:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <_free_r+0x8c>)
 80039de:	6813      	ldr	r3, [r2, #0]
 80039e0:	b933      	cbnz	r3, 80039f0 <_free_r+0x2c>
 80039e2:	6063      	str	r3, [r4, #4]
 80039e4:	6014      	str	r4, [r2, #0]
 80039e6:	4628      	mov	r0, r5
 80039e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039ec:	f000 b8d8 	b.w	8003ba0 <__malloc_unlock>
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	d908      	bls.n	8003a06 <_free_r+0x42>
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	1821      	adds	r1, r4, r0
 80039f8:	428b      	cmp	r3, r1
 80039fa:	bf01      	itttt	eq
 80039fc:	6819      	ldreq	r1, [r3, #0]
 80039fe:	685b      	ldreq	r3, [r3, #4]
 8003a00:	1809      	addeq	r1, r1, r0
 8003a02:	6021      	streq	r1, [r4, #0]
 8003a04:	e7ed      	b.n	80039e2 <_free_r+0x1e>
 8003a06:	461a      	mov	r2, r3
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	b10b      	cbz	r3, 8003a10 <_free_r+0x4c>
 8003a0c:	42a3      	cmp	r3, r4
 8003a0e:	d9fa      	bls.n	8003a06 <_free_r+0x42>
 8003a10:	6811      	ldr	r1, [r2, #0]
 8003a12:	1850      	adds	r0, r2, r1
 8003a14:	42a0      	cmp	r0, r4
 8003a16:	d10b      	bne.n	8003a30 <_free_r+0x6c>
 8003a18:	6820      	ldr	r0, [r4, #0]
 8003a1a:	4401      	add	r1, r0
 8003a1c:	1850      	adds	r0, r2, r1
 8003a1e:	4283      	cmp	r3, r0
 8003a20:	6011      	str	r1, [r2, #0]
 8003a22:	d1e0      	bne.n	80039e6 <_free_r+0x22>
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4408      	add	r0, r1
 8003a2a:	6010      	str	r0, [r2, #0]
 8003a2c:	6053      	str	r3, [r2, #4]
 8003a2e:	e7da      	b.n	80039e6 <_free_r+0x22>
 8003a30:	d902      	bls.n	8003a38 <_free_r+0x74>
 8003a32:	230c      	movs	r3, #12
 8003a34:	602b      	str	r3, [r5, #0]
 8003a36:	e7d6      	b.n	80039e6 <_free_r+0x22>
 8003a38:	6820      	ldr	r0, [r4, #0]
 8003a3a:	1821      	adds	r1, r4, r0
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	bf01      	itttt	eq
 8003a40:	6819      	ldreq	r1, [r3, #0]
 8003a42:	685b      	ldreq	r3, [r3, #4]
 8003a44:	1809      	addeq	r1, r1, r0
 8003a46:	6021      	streq	r1, [r4, #0]
 8003a48:	6063      	str	r3, [r4, #4]
 8003a4a:	6054      	str	r4, [r2, #4]
 8003a4c:	e7cb      	b.n	80039e6 <_free_r+0x22>
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
 8003a50:	20000544 	.word	0x20000544

08003a54 <sbrk_aligned>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4e0e      	ldr	r6, [pc, #56]	; (8003a90 <sbrk_aligned+0x3c>)
 8003a58:	460c      	mov	r4, r1
 8003a5a:	6831      	ldr	r1, [r6, #0]
 8003a5c:	4605      	mov	r5, r0
 8003a5e:	b911      	cbnz	r1, 8003a66 <sbrk_aligned+0x12>
 8003a60:	f000 fbaa 	bl	80041b8 <_sbrk_r>
 8003a64:	6030      	str	r0, [r6, #0]
 8003a66:	4621      	mov	r1, r4
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f000 fba5 	bl	80041b8 <_sbrk_r>
 8003a6e:	1c43      	adds	r3, r0, #1
 8003a70:	d00a      	beq.n	8003a88 <sbrk_aligned+0x34>
 8003a72:	1cc4      	adds	r4, r0, #3
 8003a74:	f024 0403 	bic.w	r4, r4, #3
 8003a78:	42a0      	cmp	r0, r4
 8003a7a:	d007      	beq.n	8003a8c <sbrk_aligned+0x38>
 8003a7c:	1a21      	subs	r1, r4, r0
 8003a7e:	4628      	mov	r0, r5
 8003a80:	f000 fb9a 	bl	80041b8 <_sbrk_r>
 8003a84:	3001      	adds	r0, #1
 8003a86:	d101      	bne.n	8003a8c <sbrk_aligned+0x38>
 8003a88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
 8003a90:	20000548 	.word	0x20000548

08003a94 <_malloc_r>:
 8003a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a98:	1ccd      	adds	r5, r1, #3
 8003a9a:	f025 0503 	bic.w	r5, r5, #3
 8003a9e:	3508      	adds	r5, #8
 8003aa0:	2d0c      	cmp	r5, #12
 8003aa2:	bf38      	it	cc
 8003aa4:	250c      	movcc	r5, #12
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	4607      	mov	r7, r0
 8003aaa:	db01      	blt.n	8003ab0 <_malloc_r+0x1c>
 8003aac:	42a9      	cmp	r1, r5
 8003aae:	d905      	bls.n	8003abc <_malloc_r+0x28>
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003abc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b90 <_malloc_r+0xfc>
 8003ac0:	f000 f868 	bl	8003b94 <__malloc_lock>
 8003ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ac8:	461c      	mov	r4, r3
 8003aca:	bb5c      	cbnz	r4, 8003b24 <_malloc_r+0x90>
 8003acc:	4629      	mov	r1, r5
 8003ace:	4638      	mov	r0, r7
 8003ad0:	f7ff ffc0 	bl	8003a54 <sbrk_aligned>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	d155      	bne.n	8003b86 <_malloc_r+0xf2>
 8003ada:	f8d8 4000 	ldr.w	r4, [r8]
 8003ade:	4626      	mov	r6, r4
 8003ae0:	2e00      	cmp	r6, #0
 8003ae2:	d145      	bne.n	8003b70 <_malloc_r+0xdc>
 8003ae4:	2c00      	cmp	r4, #0
 8003ae6:	d048      	beq.n	8003b7a <_malloc_r+0xe6>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	4631      	mov	r1, r6
 8003aec:	4638      	mov	r0, r7
 8003aee:	eb04 0903 	add.w	r9, r4, r3
 8003af2:	f000 fb61 	bl	80041b8 <_sbrk_r>
 8003af6:	4581      	cmp	r9, r0
 8003af8:	d13f      	bne.n	8003b7a <_malloc_r+0xe6>
 8003afa:	6821      	ldr	r1, [r4, #0]
 8003afc:	4638      	mov	r0, r7
 8003afe:	1a6d      	subs	r5, r5, r1
 8003b00:	4629      	mov	r1, r5
 8003b02:	f7ff ffa7 	bl	8003a54 <sbrk_aligned>
 8003b06:	3001      	adds	r0, #1
 8003b08:	d037      	beq.n	8003b7a <_malloc_r+0xe6>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	442b      	add	r3, r5
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	f8d8 3000 	ldr.w	r3, [r8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d038      	beq.n	8003b8a <_malloc_r+0xf6>
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	42a2      	cmp	r2, r4
 8003b1c:	d12b      	bne.n	8003b76 <_malloc_r+0xe2>
 8003b1e:	2200      	movs	r2, #0
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	e00f      	b.n	8003b44 <_malloc_r+0xb0>
 8003b24:	6822      	ldr	r2, [r4, #0]
 8003b26:	1b52      	subs	r2, r2, r5
 8003b28:	d41f      	bmi.n	8003b6a <_malloc_r+0xd6>
 8003b2a:	2a0b      	cmp	r2, #11
 8003b2c:	d917      	bls.n	8003b5e <_malloc_r+0xca>
 8003b2e:	1961      	adds	r1, r4, r5
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	6025      	str	r5, [r4, #0]
 8003b34:	bf18      	it	ne
 8003b36:	6059      	strne	r1, [r3, #4]
 8003b38:	6863      	ldr	r3, [r4, #4]
 8003b3a:	bf08      	it	eq
 8003b3c:	f8c8 1000 	streq.w	r1, [r8]
 8003b40:	5162      	str	r2, [r4, r5]
 8003b42:	604b      	str	r3, [r1, #4]
 8003b44:	4638      	mov	r0, r7
 8003b46:	f104 060b 	add.w	r6, r4, #11
 8003b4a:	f000 f829 	bl	8003ba0 <__malloc_unlock>
 8003b4e:	f026 0607 	bic.w	r6, r6, #7
 8003b52:	1d23      	adds	r3, r4, #4
 8003b54:	1af2      	subs	r2, r6, r3
 8003b56:	d0ae      	beq.n	8003ab6 <_malloc_r+0x22>
 8003b58:	1b9b      	subs	r3, r3, r6
 8003b5a:	50a3      	str	r3, [r4, r2]
 8003b5c:	e7ab      	b.n	8003ab6 <_malloc_r+0x22>
 8003b5e:	42a3      	cmp	r3, r4
 8003b60:	6862      	ldr	r2, [r4, #4]
 8003b62:	d1dd      	bne.n	8003b20 <_malloc_r+0x8c>
 8003b64:	f8c8 2000 	str.w	r2, [r8]
 8003b68:	e7ec      	b.n	8003b44 <_malloc_r+0xb0>
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	6864      	ldr	r4, [r4, #4]
 8003b6e:	e7ac      	b.n	8003aca <_malloc_r+0x36>
 8003b70:	4634      	mov	r4, r6
 8003b72:	6876      	ldr	r6, [r6, #4]
 8003b74:	e7b4      	b.n	8003ae0 <_malloc_r+0x4c>
 8003b76:	4613      	mov	r3, r2
 8003b78:	e7cc      	b.n	8003b14 <_malloc_r+0x80>
 8003b7a:	230c      	movs	r3, #12
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	f000 f80e 	bl	8003ba0 <__malloc_unlock>
 8003b84:	e797      	b.n	8003ab6 <_malloc_r+0x22>
 8003b86:	6025      	str	r5, [r4, #0]
 8003b88:	e7dc      	b.n	8003b44 <_malloc_r+0xb0>
 8003b8a:	605b      	str	r3, [r3, #4]
 8003b8c:	deff      	udf	#255	; 0xff
 8003b8e:	bf00      	nop
 8003b90:	20000544 	.word	0x20000544

08003b94 <__malloc_lock>:
 8003b94:	4801      	ldr	r0, [pc, #4]	; (8003b9c <__malloc_lock+0x8>)
 8003b96:	f7ff bf05 	b.w	80039a4 <__retarget_lock_acquire_recursive>
 8003b9a:	bf00      	nop
 8003b9c:	20000540 	.word	0x20000540

08003ba0 <__malloc_unlock>:
 8003ba0:	4801      	ldr	r0, [pc, #4]	; (8003ba8 <__malloc_unlock+0x8>)
 8003ba2:	f7ff bf00 	b.w	80039a6 <__retarget_lock_release_recursive>
 8003ba6:	bf00      	nop
 8003ba8:	20000540 	.word	0x20000540

08003bac <__ssputs_r>:
 8003bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb0:	461f      	mov	r7, r3
 8003bb2:	688e      	ldr	r6, [r1, #8]
 8003bb4:	4682      	mov	sl, r0
 8003bb6:	42be      	cmp	r6, r7
 8003bb8:	460c      	mov	r4, r1
 8003bba:	4690      	mov	r8, r2
 8003bbc:	680b      	ldr	r3, [r1, #0]
 8003bbe:	d82c      	bhi.n	8003c1a <__ssputs_r+0x6e>
 8003bc0:	898a      	ldrh	r2, [r1, #12]
 8003bc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bc6:	d026      	beq.n	8003c16 <__ssputs_r+0x6a>
 8003bc8:	6965      	ldr	r5, [r4, #20]
 8003bca:	6909      	ldr	r1, [r1, #16]
 8003bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bd0:	eba3 0901 	sub.w	r9, r3, r1
 8003bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bd8:	1c7b      	adds	r3, r7, #1
 8003bda:	444b      	add	r3, r9
 8003bdc:	106d      	asrs	r5, r5, #1
 8003bde:	429d      	cmp	r5, r3
 8003be0:	bf38      	it	cc
 8003be2:	461d      	movcc	r5, r3
 8003be4:	0553      	lsls	r3, r2, #21
 8003be6:	d527      	bpl.n	8003c38 <__ssputs_r+0x8c>
 8003be8:	4629      	mov	r1, r5
 8003bea:	f7ff ff53 	bl	8003a94 <_malloc_r>
 8003bee:	4606      	mov	r6, r0
 8003bf0:	b360      	cbz	r0, 8003c4c <__ssputs_r+0xa0>
 8003bf2:	464a      	mov	r2, r9
 8003bf4:	6921      	ldr	r1, [r4, #16]
 8003bf6:	f7ff fed7 	bl	80039a8 <memcpy>
 8003bfa:	89a3      	ldrh	r3, [r4, #12]
 8003bfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c04:	81a3      	strh	r3, [r4, #12]
 8003c06:	6126      	str	r6, [r4, #16]
 8003c08:	444e      	add	r6, r9
 8003c0a:	6026      	str	r6, [r4, #0]
 8003c0c:	463e      	mov	r6, r7
 8003c0e:	6165      	str	r5, [r4, #20]
 8003c10:	eba5 0509 	sub.w	r5, r5, r9
 8003c14:	60a5      	str	r5, [r4, #8]
 8003c16:	42be      	cmp	r6, r7
 8003c18:	d900      	bls.n	8003c1c <__ssputs_r+0x70>
 8003c1a:	463e      	mov	r6, r7
 8003c1c:	4632      	mov	r2, r6
 8003c1e:	4641      	mov	r1, r8
 8003c20:	6820      	ldr	r0, [r4, #0]
 8003c22:	f000 faaf 	bl	8004184 <memmove>
 8003c26:	2000      	movs	r0, #0
 8003c28:	68a3      	ldr	r3, [r4, #8]
 8003c2a:	1b9b      	subs	r3, r3, r6
 8003c2c:	60a3      	str	r3, [r4, #8]
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	4433      	add	r3, r6
 8003c32:	6023      	str	r3, [r4, #0]
 8003c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c38:	462a      	mov	r2, r5
 8003c3a:	f000 fadb 	bl	80041f4 <_realloc_r>
 8003c3e:	4606      	mov	r6, r0
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d1e0      	bne.n	8003c06 <__ssputs_r+0x5a>
 8003c44:	4650      	mov	r0, sl
 8003c46:	6921      	ldr	r1, [r4, #16]
 8003c48:	f7ff febc 	bl	80039c4 <_free_r>
 8003c4c:	230c      	movs	r3, #12
 8003c4e:	f8ca 3000 	str.w	r3, [sl]
 8003c52:	89a3      	ldrh	r3, [r4, #12]
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5c:	81a3      	strh	r3, [r4, #12]
 8003c5e:	e7e9      	b.n	8003c34 <__ssputs_r+0x88>

08003c60 <_svfiprintf_r>:
 8003c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c64:	4698      	mov	r8, r3
 8003c66:	898b      	ldrh	r3, [r1, #12]
 8003c68:	4607      	mov	r7, r0
 8003c6a:	061b      	lsls	r3, r3, #24
 8003c6c:	460d      	mov	r5, r1
 8003c6e:	4614      	mov	r4, r2
 8003c70:	b09d      	sub	sp, #116	; 0x74
 8003c72:	d50e      	bpl.n	8003c92 <_svfiprintf_r+0x32>
 8003c74:	690b      	ldr	r3, [r1, #16]
 8003c76:	b963      	cbnz	r3, 8003c92 <_svfiprintf_r+0x32>
 8003c78:	2140      	movs	r1, #64	; 0x40
 8003c7a:	f7ff ff0b 	bl	8003a94 <_malloc_r>
 8003c7e:	6028      	str	r0, [r5, #0]
 8003c80:	6128      	str	r0, [r5, #16]
 8003c82:	b920      	cbnz	r0, 8003c8e <_svfiprintf_r+0x2e>
 8003c84:	230c      	movs	r3, #12
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c8c:	e0d0      	b.n	8003e30 <_svfiprintf_r+0x1d0>
 8003c8e:	2340      	movs	r3, #64	; 0x40
 8003c90:	616b      	str	r3, [r5, #20]
 8003c92:	2300      	movs	r3, #0
 8003c94:	9309      	str	r3, [sp, #36]	; 0x24
 8003c96:	2320      	movs	r3, #32
 8003c98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c9c:	2330      	movs	r3, #48	; 0x30
 8003c9e:	f04f 0901 	mov.w	r9, #1
 8003ca2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ca6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003e48 <_svfiprintf_r+0x1e8>
 8003caa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cae:	4623      	mov	r3, r4
 8003cb0:	469a      	mov	sl, r3
 8003cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cb6:	b10a      	cbz	r2, 8003cbc <_svfiprintf_r+0x5c>
 8003cb8:	2a25      	cmp	r2, #37	; 0x25
 8003cba:	d1f9      	bne.n	8003cb0 <_svfiprintf_r+0x50>
 8003cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8003cc0:	d00b      	beq.n	8003cda <_svfiprintf_r+0x7a>
 8003cc2:	465b      	mov	r3, fp
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	4638      	mov	r0, r7
 8003cca:	f7ff ff6f 	bl	8003bac <__ssputs_r>
 8003cce:	3001      	adds	r0, #1
 8003cd0:	f000 80a9 	beq.w	8003e26 <_svfiprintf_r+0x1c6>
 8003cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cd6:	445a      	add	r2, fp
 8003cd8:	9209      	str	r2, [sp, #36]	; 0x24
 8003cda:	f89a 3000 	ldrb.w	r3, [sl]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80a1 	beq.w	8003e26 <_svfiprintf_r+0x1c6>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cee:	f10a 0a01 	add.w	sl, sl, #1
 8003cf2:	9304      	str	r3, [sp, #16]
 8003cf4:	9307      	str	r3, [sp, #28]
 8003cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8003cfc:	4654      	mov	r4, sl
 8003cfe:	2205      	movs	r2, #5
 8003d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d04:	4850      	ldr	r0, [pc, #320]	; (8003e48 <_svfiprintf_r+0x1e8>)
 8003d06:	f000 fa67 	bl	80041d8 <memchr>
 8003d0a:	9a04      	ldr	r2, [sp, #16]
 8003d0c:	b9d8      	cbnz	r0, 8003d46 <_svfiprintf_r+0xe6>
 8003d0e:	06d0      	lsls	r0, r2, #27
 8003d10:	bf44      	itt	mi
 8003d12:	2320      	movmi	r3, #32
 8003d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d18:	0711      	lsls	r1, r2, #28
 8003d1a:	bf44      	itt	mi
 8003d1c:	232b      	movmi	r3, #43	; 0x2b
 8003d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d22:	f89a 3000 	ldrb.w	r3, [sl]
 8003d26:	2b2a      	cmp	r3, #42	; 0x2a
 8003d28:	d015      	beq.n	8003d56 <_svfiprintf_r+0xf6>
 8003d2a:	4654      	mov	r4, sl
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f04f 0c0a 	mov.w	ip, #10
 8003d32:	9a07      	ldr	r2, [sp, #28]
 8003d34:	4621      	mov	r1, r4
 8003d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d3a:	3b30      	subs	r3, #48	; 0x30
 8003d3c:	2b09      	cmp	r3, #9
 8003d3e:	d94d      	bls.n	8003ddc <_svfiprintf_r+0x17c>
 8003d40:	b1b0      	cbz	r0, 8003d70 <_svfiprintf_r+0x110>
 8003d42:	9207      	str	r2, [sp, #28]
 8003d44:	e014      	b.n	8003d70 <_svfiprintf_r+0x110>
 8003d46:	eba0 0308 	sub.w	r3, r0, r8
 8003d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	46a2      	mov	sl, r4
 8003d52:	9304      	str	r3, [sp, #16]
 8003d54:	e7d2      	b.n	8003cfc <_svfiprintf_r+0x9c>
 8003d56:	9b03      	ldr	r3, [sp, #12]
 8003d58:	1d19      	adds	r1, r3, #4
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	9103      	str	r1, [sp, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bfbb      	ittet	lt
 8003d62:	425b      	neglt	r3, r3
 8003d64:	f042 0202 	orrlt.w	r2, r2, #2
 8003d68:	9307      	strge	r3, [sp, #28]
 8003d6a:	9307      	strlt	r3, [sp, #28]
 8003d6c:	bfb8      	it	lt
 8003d6e:	9204      	strlt	r2, [sp, #16]
 8003d70:	7823      	ldrb	r3, [r4, #0]
 8003d72:	2b2e      	cmp	r3, #46	; 0x2e
 8003d74:	d10c      	bne.n	8003d90 <_svfiprintf_r+0x130>
 8003d76:	7863      	ldrb	r3, [r4, #1]
 8003d78:	2b2a      	cmp	r3, #42	; 0x2a
 8003d7a:	d134      	bne.n	8003de6 <_svfiprintf_r+0x186>
 8003d7c:	9b03      	ldr	r3, [sp, #12]
 8003d7e:	3402      	adds	r4, #2
 8003d80:	1d1a      	adds	r2, r3, #4
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	9203      	str	r2, [sp, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bfb8      	it	lt
 8003d8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d8e:	9305      	str	r3, [sp, #20]
 8003d90:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003e4c <_svfiprintf_r+0x1ec>
 8003d94:	2203      	movs	r2, #3
 8003d96:	4650      	mov	r0, sl
 8003d98:	7821      	ldrb	r1, [r4, #0]
 8003d9a:	f000 fa1d 	bl	80041d8 <memchr>
 8003d9e:	b138      	cbz	r0, 8003db0 <_svfiprintf_r+0x150>
 8003da0:	2240      	movs	r2, #64	; 0x40
 8003da2:	9b04      	ldr	r3, [sp, #16]
 8003da4:	eba0 000a 	sub.w	r0, r0, sl
 8003da8:	4082      	lsls	r2, r0
 8003daa:	4313      	orrs	r3, r2
 8003dac:	3401      	adds	r4, #1
 8003dae:	9304      	str	r3, [sp, #16]
 8003db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003db4:	2206      	movs	r2, #6
 8003db6:	4826      	ldr	r0, [pc, #152]	; (8003e50 <_svfiprintf_r+0x1f0>)
 8003db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dbc:	f000 fa0c 	bl	80041d8 <memchr>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d038      	beq.n	8003e36 <_svfiprintf_r+0x1d6>
 8003dc4:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <_svfiprintf_r+0x1f4>)
 8003dc6:	bb1b      	cbnz	r3, 8003e10 <_svfiprintf_r+0x1b0>
 8003dc8:	9b03      	ldr	r3, [sp, #12]
 8003dca:	3307      	adds	r3, #7
 8003dcc:	f023 0307 	bic.w	r3, r3, #7
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	9303      	str	r3, [sp, #12]
 8003dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dd6:	4433      	add	r3, r6
 8003dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dda:	e768      	b.n	8003cae <_svfiprintf_r+0x4e>
 8003ddc:	460c      	mov	r4, r1
 8003dde:	2001      	movs	r0, #1
 8003de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003de4:	e7a6      	b.n	8003d34 <_svfiprintf_r+0xd4>
 8003de6:	2300      	movs	r3, #0
 8003de8:	f04f 0c0a 	mov.w	ip, #10
 8003dec:	4619      	mov	r1, r3
 8003dee:	3401      	adds	r4, #1
 8003df0:	9305      	str	r3, [sp, #20]
 8003df2:	4620      	mov	r0, r4
 8003df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003df8:	3a30      	subs	r2, #48	; 0x30
 8003dfa:	2a09      	cmp	r2, #9
 8003dfc:	d903      	bls.n	8003e06 <_svfiprintf_r+0x1a6>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0c6      	beq.n	8003d90 <_svfiprintf_r+0x130>
 8003e02:	9105      	str	r1, [sp, #20]
 8003e04:	e7c4      	b.n	8003d90 <_svfiprintf_r+0x130>
 8003e06:	4604      	mov	r4, r0
 8003e08:	2301      	movs	r3, #1
 8003e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e0e:	e7f0      	b.n	8003df2 <_svfiprintf_r+0x192>
 8003e10:	ab03      	add	r3, sp, #12
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	462a      	mov	r2, r5
 8003e16:	4638      	mov	r0, r7
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <_svfiprintf_r+0x1f8>)
 8003e1a:	a904      	add	r1, sp, #16
 8003e1c:	f3af 8000 	nop.w
 8003e20:	1c42      	adds	r2, r0, #1
 8003e22:	4606      	mov	r6, r0
 8003e24:	d1d6      	bne.n	8003dd4 <_svfiprintf_r+0x174>
 8003e26:	89ab      	ldrh	r3, [r5, #12]
 8003e28:	065b      	lsls	r3, r3, #25
 8003e2a:	f53f af2d 	bmi.w	8003c88 <_svfiprintf_r+0x28>
 8003e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e30:	b01d      	add	sp, #116	; 0x74
 8003e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e36:	ab03      	add	r3, sp, #12
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	462a      	mov	r2, r5
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <_svfiprintf_r+0x1f8>)
 8003e40:	a904      	add	r1, sp, #16
 8003e42:	f000 f87d 	bl	8003f40 <_printf_i>
 8003e46:	e7eb      	b.n	8003e20 <_svfiprintf_r+0x1c0>
 8003e48:	0800436a 	.word	0x0800436a
 8003e4c:	08004370 	.word	0x08004370
 8003e50:	08004374 	.word	0x08004374
 8003e54:	00000000 	.word	0x00000000
 8003e58:	08003bad 	.word	0x08003bad

08003e5c <_printf_common>:
 8003e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e60:	4616      	mov	r6, r2
 8003e62:	4699      	mov	r9, r3
 8003e64:	688a      	ldr	r2, [r1, #8]
 8003e66:	690b      	ldr	r3, [r1, #16]
 8003e68:	4607      	mov	r7, r0
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	bfb8      	it	lt
 8003e6e:	4613      	movlt	r3, r2
 8003e70:	6033      	str	r3, [r6, #0]
 8003e72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e76:	460c      	mov	r4, r1
 8003e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e7c:	b10a      	cbz	r2, 8003e82 <_printf_common+0x26>
 8003e7e:	3301      	adds	r3, #1
 8003e80:	6033      	str	r3, [r6, #0]
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	0699      	lsls	r1, r3, #26
 8003e86:	bf42      	ittt	mi
 8003e88:	6833      	ldrmi	r3, [r6, #0]
 8003e8a:	3302      	addmi	r3, #2
 8003e8c:	6033      	strmi	r3, [r6, #0]
 8003e8e:	6825      	ldr	r5, [r4, #0]
 8003e90:	f015 0506 	ands.w	r5, r5, #6
 8003e94:	d106      	bne.n	8003ea4 <_printf_common+0x48>
 8003e96:	f104 0a19 	add.w	sl, r4, #25
 8003e9a:	68e3      	ldr	r3, [r4, #12]
 8003e9c:	6832      	ldr	r2, [r6, #0]
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	42ab      	cmp	r3, r5
 8003ea2:	dc2b      	bgt.n	8003efc <_printf_common+0xa0>
 8003ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ea8:	1e13      	subs	r3, r2, #0
 8003eaa:	6822      	ldr	r2, [r4, #0]
 8003eac:	bf18      	it	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	0692      	lsls	r2, r2, #26
 8003eb2:	d430      	bmi.n	8003f16 <_printf_common+0xba>
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ebc:	47c0      	blx	r8
 8003ebe:	3001      	adds	r0, #1
 8003ec0:	d023      	beq.n	8003f0a <_printf_common+0xae>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	6922      	ldr	r2, [r4, #16]
 8003ec6:	f003 0306 	and.w	r3, r3, #6
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	bf14      	ite	ne
 8003ece:	2500      	movne	r5, #0
 8003ed0:	6833      	ldreq	r3, [r6, #0]
 8003ed2:	f04f 0600 	mov.w	r6, #0
 8003ed6:	bf08      	it	eq
 8003ed8:	68e5      	ldreq	r5, [r4, #12]
 8003eda:	f104 041a 	add.w	r4, r4, #26
 8003ede:	bf08      	it	eq
 8003ee0:	1aed      	subeq	r5, r5, r3
 8003ee2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003ee6:	bf08      	it	eq
 8003ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bfc4      	itt	gt
 8003ef0:	1a9b      	subgt	r3, r3, r2
 8003ef2:	18ed      	addgt	r5, r5, r3
 8003ef4:	42b5      	cmp	r5, r6
 8003ef6:	d11a      	bne.n	8003f2e <_printf_common+0xd2>
 8003ef8:	2000      	movs	r0, #0
 8003efa:	e008      	b.n	8003f0e <_printf_common+0xb2>
 8003efc:	2301      	movs	r3, #1
 8003efe:	4652      	mov	r2, sl
 8003f00:	4649      	mov	r1, r9
 8003f02:	4638      	mov	r0, r7
 8003f04:	47c0      	blx	r8
 8003f06:	3001      	adds	r0, #1
 8003f08:	d103      	bne.n	8003f12 <_printf_common+0xb6>
 8003f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f12:	3501      	adds	r5, #1
 8003f14:	e7c1      	b.n	8003e9a <_printf_common+0x3e>
 8003f16:	2030      	movs	r0, #48	; 0x30
 8003f18:	18e1      	adds	r1, r4, r3
 8003f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f24:	4422      	add	r2, r4
 8003f26:	3302      	adds	r3, #2
 8003f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f2c:	e7c2      	b.n	8003eb4 <_printf_common+0x58>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4622      	mov	r2, r4
 8003f32:	4649      	mov	r1, r9
 8003f34:	4638      	mov	r0, r7
 8003f36:	47c0      	blx	r8
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d0e6      	beq.n	8003f0a <_printf_common+0xae>
 8003f3c:	3601      	adds	r6, #1
 8003f3e:	e7d9      	b.n	8003ef4 <_printf_common+0x98>

08003f40 <_printf_i>:
 8003f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	7e0f      	ldrb	r7, [r1, #24]
 8003f46:	4691      	mov	r9, r2
 8003f48:	2f78      	cmp	r7, #120	; 0x78
 8003f4a:	4680      	mov	r8, r0
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	469a      	mov	sl, r3
 8003f50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f56:	d807      	bhi.n	8003f68 <_printf_i+0x28>
 8003f58:	2f62      	cmp	r7, #98	; 0x62
 8003f5a:	d80a      	bhi.n	8003f72 <_printf_i+0x32>
 8003f5c:	2f00      	cmp	r7, #0
 8003f5e:	f000 80d5 	beq.w	800410c <_printf_i+0x1cc>
 8003f62:	2f58      	cmp	r7, #88	; 0x58
 8003f64:	f000 80c1 	beq.w	80040ea <_printf_i+0x1aa>
 8003f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f70:	e03a      	b.n	8003fe8 <_printf_i+0xa8>
 8003f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f76:	2b15      	cmp	r3, #21
 8003f78:	d8f6      	bhi.n	8003f68 <_printf_i+0x28>
 8003f7a:	a101      	add	r1, pc, #4	; (adr r1, 8003f80 <_printf_i+0x40>)
 8003f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f80:	08003fd9 	.word	0x08003fd9
 8003f84:	08003fed 	.word	0x08003fed
 8003f88:	08003f69 	.word	0x08003f69
 8003f8c:	08003f69 	.word	0x08003f69
 8003f90:	08003f69 	.word	0x08003f69
 8003f94:	08003f69 	.word	0x08003f69
 8003f98:	08003fed 	.word	0x08003fed
 8003f9c:	08003f69 	.word	0x08003f69
 8003fa0:	08003f69 	.word	0x08003f69
 8003fa4:	08003f69 	.word	0x08003f69
 8003fa8:	08003f69 	.word	0x08003f69
 8003fac:	080040f3 	.word	0x080040f3
 8003fb0:	08004019 	.word	0x08004019
 8003fb4:	080040ad 	.word	0x080040ad
 8003fb8:	08003f69 	.word	0x08003f69
 8003fbc:	08003f69 	.word	0x08003f69
 8003fc0:	08004115 	.word	0x08004115
 8003fc4:	08003f69 	.word	0x08003f69
 8003fc8:	08004019 	.word	0x08004019
 8003fcc:	08003f69 	.word	0x08003f69
 8003fd0:	08003f69 	.word	0x08003f69
 8003fd4:	080040b5 	.word	0x080040b5
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	1d1a      	adds	r2, r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	602a      	str	r2, [r5, #0]
 8003fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0a0      	b.n	800412e <_printf_i+0x1ee>
 8003fec:	6820      	ldr	r0, [r4, #0]
 8003fee:	682b      	ldr	r3, [r5, #0]
 8003ff0:	0607      	lsls	r7, r0, #24
 8003ff2:	f103 0104 	add.w	r1, r3, #4
 8003ff6:	6029      	str	r1, [r5, #0]
 8003ff8:	d501      	bpl.n	8003ffe <_printf_i+0xbe>
 8003ffa:	681e      	ldr	r6, [r3, #0]
 8003ffc:	e003      	b.n	8004006 <_printf_i+0xc6>
 8003ffe:	0646      	lsls	r6, r0, #25
 8004000:	d5fb      	bpl.n	8003ffa <_printf_i+0xba>
 8004002:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004006:	2e00      	cmp	r6, #0
 8004008:	da03      	bge.n	8004012 <_printf_i+0xd2>
 800400a:	232d      	movs	r3, #45	; 0x2d
 800400c:	4276      	negs	r6, r6
 800400e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004012:	230a      	movs	r3, #10
 8004014:	4859      	ldr	r0, [pc, #356]	; (800417c <_printf_i+0x23c>)
 8004016:	e012      	b.n	800403e <_printf_i+0xfe>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	1d19      	adds	r1, r3, #4
 800401e:	6029      	str	r1, [r5, #0]
 8004020:	0605      	lsls	r5, r0, #24
 8004022:	d501      	bpl.n	8004028 <_printf_i+0xe8>
 8004024:	681e      	ldr	r6, [r3, #0]
 8004026:	e002      	b.n	800402e <_printf_i+0xee>
 8004028:	0641      	lsls	r1, r0, #25
 800402a:	d5fb      	bpl.n	8004024 <_printf_i+0xe4>
 800402c:	881e      	ldrh	r6, [r3, #0]
 800402e:	2f6f      	cmp	r7, #111	; 0x6f
 8004030:	bf0c      	ite	eq
 8004032:	2308      	moveq	r3, #8
 8004034:	230a      	movne	r3, #10
 8004036:	4851      	ldr	r0, [pc, #324]	; (800417c <_printf_i+0x23c>)
 8004038:	2100      	movs	r1, #0
 800403a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800403e:	6865      	ldr	r5, [r4, #4]
 8004040:	2d00      	cmp	r5, #0
 8004042:	bfa8      	it	ge
 8004044:	6821      	ldrge	r1, [r4, #0]
 8004046:	60a5      	str	r5, [r4, #8]
 8004048:	bfa4      	itt	ge
 800404a:	f021 0104 	bicge.w	r1, r1, #4
 800404e:	6021      	strge	r1, [r4, #0]
 8004050:	b90e      	cbnz	r6, 8004056 <_printf_i+0x116>
 8004052:	2d00      	cmp	r5, #0
 8004054:	d04b      	beq.n	80040ee <_printf_i+0x1ae>
 8004056:	4615      	mov	r5, r2
 8004058:	fbb6 f1f3 	udiv	r1, r6, r3
 800405c:	fb03 6711 	mls	r7, r3, r1, r6
 8004060:	5dc7      	ldrb	r7, [r0, r7]
 8004062:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004066:	4637      	mov	r7, r6
 8004068:	42bb      	cmp	r3, r7
 800406a:	460e      	mov	r6, r1
 800406c:	d9f4      	bls.n	8004058 <_printf_i+0x118>
 800406e:	2b08      	cmp	r3, #8
 8004070:	d10b      	bne.n	800408a <_printf_i+0x14a>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	07de      	lsls	r6, r3, #31
 8004076:	d508      	bpl.n	800408a <_printf_i+0x14a>
 8004078:	6923      	ldr	r3, [r4, #16]
 800407a:	6861      	ldr	r1, [r4, #4]
 800407c:	4299      	cmp	r1, r3
 800407e:	bfde      	ittt	le
 8004080:	2330      	movle	r3, #48	; 0x30
 8004082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004086:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800408a:	1b52      	subs	r2, r2, r5
 800408c:	6122      	str	r2, [r4, #16]
 800408e:	464b      	mov	r3, r9
 8004090:	4621      	mov	r1, r4
 8004092:	4640      	mov	r0, r8
 8004094:	f8cd a000 	str.w	sl, [sp]
 8004098:	aa03      	add	r2, sp, #12
 800409a:	f7ff fedf 	bl	8003e5c <_printf_common>
 800409e:	3001      	adds	r0, #1
 80040a0:	d14a      	bne.n	8004138 <_printf_i+0x1f8>
 80040a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040a6:	b004      	add	sp, #16
 80040a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	f043 0320 	orr.w	r3, r3, #32
 80040b2:	6023      	str	r3, [r4, #0]
 80040b4:	2778      	movs	r7, #120	; 0x78
 80040b6:	4832      	ldr	r0, [pc, #200]	; (8004180 <_printf_i+0x240>)
 80040b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	6829      	ldr	r1, [r5, #0]
 80040c0:	061f      	lsls	r7, r3, #24
 80040c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80040c6:	d402      	bmi.n	80040ce <_printf_i+0x18e>
 80040c8:	065f      	lsls	r7, r3, #25
 80040ca:	bf48      	it	mi
 80040cc:	b2b6      	uxthmi	r6, r6
 80040ce:	07df      	lsls	r7, r3, #31
 80040d0:	bf48      	it	mi
 80040d2:	f043 0320 	orrmi.w	r3, r3, #32
 80040d6:	6029      	str	r1, [r5, #0]
 80040d8:	bf48      	it	mi
 80040da:	6023      	strmi	r3, [r4, #0]
 80040dc:	b91e      	cbnz	r6, 80040e6 <_printf_i+0x1a6>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	f023 0320 	bic.w	r3, r3, #32
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	2310      	movs	r3, #16
 80040e8:	e7a6      	b.n	8004038 <_printf_i+0xf8>
 80040ea:	4824      	ldr	r0, [pc, #144]	; (800417c <_printf_i+0x23c>)
 80040ec:	e7e4      	b.n	80040b8 <_printf_i+0x178>
 80040ee:	4615      	mov	r5, r2
 80040f0:	e7bd      	b.n	800406e <_printf_i+0x12e>
 80040f2:	682b      	ldr	r3, [r5, #0]
 80040f4:	6826      	ldr	r6, [r4, #0]
 80040f6:	1d18      	adds	r0, r3, #4
 80040f8:	6961      	ldr	r1, [r4, #20]
 80040fa:	6028      	str	r0, [r5, #0]
 80040fc:	0635      	lsls	r5, r6, #24
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	d501      	bpl.n	8004106 <_printf_i+0x1c6>
 8004102:	6019      	str	r1, [r3, #0]
 8004104:	e002      	b.n	800410c <_printf_i+0x1cc>
 8004106:	0670      	lsls	r0, r6, #25
 8004108:	d5fb      	bpl.n	8004102 <_printf_i+0x1c2>
 800410a:	8019      	strh	r1, [r3, #0]
 800410c:	2300      	movs	r3, #0
 800410e:	4615      	mov	r5, r2
 8004110:	6123      	str	r3, [r4, #16]
 8004112:	e7bc      	b.n	800408e <_printf_i+0x14e>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	2100      	movs	r1, #0
 8004118:	1d1a      	adds	r2, r3, #4
 800411a:	602a      	str	r2, [r5, #0]
 800411c:	681d      	ldr	r5, [r3, #0]
 800411e:	6862      	ldr	r2, [r4, #4]
 8004120:	4628      	mov	r0, r5
 8004122:	f000 f859 	bl	80041d8 <memchr>
 8004126:	b108      	cbz	r0, 800412c <_printf_i+0x1ec>
 8004128:	1b40      	subs	r0, r0, r5
 800412a:	6060      	str	r0, [r4, #4]
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	6123      	str	r3, [r4, #16]
 8004130:	2300      	movs	r3, #0
 8004132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004136:	e7aa      	b.n	800408e <_printf_i+0x14e>
 8004138:	462a      	mov	r2, r5
 800413a:	4649      	mov	r1, r9
 800413c:	4640      	mov	r0, r8
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	47d0      	blx	sl
 8004142:	3001      	adds	r0, #1
 8004144:	d0ad      	beq.n	80040a2 <_printf_i+0x162>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	079b      	lsls	r3, r3, #30
 800414a:	d413      	bmi.n	8004174 <_printf_i+0x234>
 800414c:	68e0      	ldr	r0, [r4, #12]
 800414e:	9b03      	ldr	r3, [sp, #12]
 8004150:	4298      	cmp	r0, r3
 8004152:	bfb8      	it	lt
 8004154:	4618      	movlt	r0, r3
 8004156:	e7a6      	b.n	80040a6 <_printf_i+0x166>
 8004158:	2301      	movs	r3, #1
 800415a:	4632      	mov	r2, r6
 800415c:	4649      	mov	r1, r9
 800415e:	4640      	mov	r0, r8
 8004160:	47d0      	blx	sl
 8004162:	3001      	adds	r0, #1
 8004164:	d09d      	beq.n	80040a2 <_printf_i+0x162>
 8004166:	3501      	adds	r5, #1
 8004168:	68e3      	ldr	r3, [r4, #12]
 800416a:	9903      	ldr	r1, [sp, #12]
 800416c:	1a5b      	subs	r3, r3, r1
 800416e:	42ab      	cmp	r3, r5
 8004170:	dcf2      	bgt.n	8004158 <_printf_i+0x218>
 8004172:	e7eb      	b.n	800414c <_printf_i+0x20c>
 8004174:	2500      	movs	r5, #0
 8004176:	f104 0619 	add.w	r6, r4, #25
 800417a:	e7f5      	b.n	8004168 <_printf_i+0x228>
 800417c:	0800437b 	.word	0x0800437b
 8004180:	0800438c 	.word	0x0800438c

08004184 <memmove>:
 8004184:	4288      	cmp	r0, r1
 8004186:	b510      	push	{r4, lr}
 8004188:	eb01 0402 	add.w	r4, r1, r2
 800418c:	d902      	bls.n	8004194 <memmove+0x10>
 800418e:	4284      	cmp	r4, r0
 8004190:	4623      	mov	r3, r4
 8004192:	d807      	bhi.n	80041a4 <memmove+0x20>
 8004194:	1e43      	subs	r3, r0, #1
 8004196:	42a1      	cmp	r1, r4
 8004198:	d008      	beq.n	80041ac <memmove+0x28>
 800419a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800419e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041a2:	e7f8      	b.n	8004196 <memmove+0x12>
 80041a4:	4601      	mov	r1, r0
 80041a6:	4402      	add	r2, r0
 80041a8:	428a      	cmp	r2, r1
 80041aa:	d100      	bne.n	80041ae <memmove+0x2a>
 80041ac:	bd10      	pop	{r4, pc}
 80041ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041b6:	e7f7      	b.n	80041a8 <memmove+0x24>

080041b8 <_sbrk_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	2300      	movs	r3, #0
 80041bc:	4d05      	ldr	r5, [pc, #20]	; (80041d4 <_sbrk_r+0x1c>)
 80041be:	4604      	mov	r4, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	f7fc fe2a 	bl	8000e1c <_sbrk>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_sbrk_r+0x1a>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_sbrk_r+0x1a>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	2000053c 	.word	0x2000053c

080041d8 <memchr>:
 80041d8:	4603      	mov	r3, r0
 80041da:	b510      	push	{r4, lr}
 80041dc:	b2c9      	uxtb	r1, r1
 80041de:	4402      	add	r2, r0
 80041e0:	4293      	cmp	r3, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	d101      	bne.n	80041ea <memchr+0x12>
 80041e6:	2000      	movs	r0, #0
 80041e8:	e003      	b.n	80041f2 <memchr+0x1a>
 80041ea:	7804      	ldrb	r4, [r0, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	428c      	cmp	r4, r1
 80041f0:	d1f6      	bne.n	80041e0 <memchr+0x8>
 80041f2:	bd10      	pop	{r4, pc}

080041f4 <_realloc_r>:
 80041f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f8:	4680      	mov	r8, r0
 80041fa:	4614      	mov	r4, r2
 80041fc:	460e      	mov	r6, r1
 80041fe:	b921      	cbnz	r1, 800420a <_realloc_r+0x16>
 8004200:	4611      	mov	r1, r2
 8004202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004206:	f7ff bc45 	b.w	8003a94 <_malloc_r>
 800420a:	b92a      	cbnz	r2, 8004218 <_realloc_r+0x24>
 800420c:	f7ff fbda 	bl	80039c4 <_free_r>
 8004210:	4625      	mov	r5, r4
 8004212:	4628      	mov	r0, r5
 8004214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004218:	f000 f81b 	bl	8004252 <_malloc_usable_size_r>
 800421c:	4284      	cmp	r4, r0
 800421e:	4607      	mov	r7, r0
 8004220:	d802      	bhi.n	8004228 <_realloc_r+0x34>
 8004222:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004226:	d812      	bhi.n	800424e <_realloc_r+0x5a>
 8004228:	4621      	mov	r1, r4
 800422a:	4640      	mov	r0, r8
 800422c:	f7ff fc32 	bl	8003a94 <_malloc_r>
 8004230:	4605      	mov	r5, r0
 8004232:	2800      	cmp	r0, #0
 8004234:	d0ed      	beq.n	8004212 <_realloc_r+0x1e>
 8004236:	42bc      	cmp	r4, r7
 8004238:	4622      	mov	r2, r4
 800423a:	4631      	mov	r1, r6
 800423c:	bf28      	it	cs
 800423e:	463a      	movcs	r2, r7
 8004240:	f7ff fbb2 	bl	80039a8 <memcpy>
 8004244:	4631      	mov	r1, r6
 8004246:	4640      	mov	r0, r8
 8004248:	f7ff fbbc 	bl	80039c4 <_free_r>
 800424c:	e7e1      	b.n	8004212 <_realloc_r+0x1e>
 800424e:	4635      	mov	r5, r6
 8004250:	e7df      	b.n	8004212 <_realloc_r+0x1e>

08004252 <_malloc_usable_size_r>:
 8004252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004256:	1f18      	subs	r0, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	bfbc      	itt	lt
 800425c:	580b      	ldrlt	r3, [r1, r0]
 800425e:	18c0      	addlt	r0, r0, r3
 8004260:	4770      	bx	lr
	...

08004264 <_init>:
 8004264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004266:	bf00      	nop
 8004268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426a:	bc08      	pop	{r3}
 800426c:	469e      	mov	lr, r3
 800426e:	4770      	bx	lr

08004270 <_fini>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	bf00      	nop
 8004274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004276:	bc08      	pop	{r3}
 8004278:	469e      	mov	lr, r3
 800427a:	4770      	bx	lr
